{"version":3,"sources":["d3.layout.listGraph.min.js"],"names":["D3LayoutListGraph","d3","isFinite","value","nativeIsFinite","isObject","type","isFunction","objToString$1","call","funcTag","isObjectLike","isNative","reIsNative","test","fnToString","reIsHostCtor","getNative","object","key","undefined","isLength","MAX_SAFE_INTEGER","traverseGraph","graph","starts","columnCache","links","scaleX","scaleY","processBars","node","data","bars","isArray","i","length","Math","max","min","keys","Object","push","id","processNode","parent","duplication","_id","_node","cloneId","clones","children","clone","originalId","originalNode","childRefs","depth","x","y","processLink","source","target","offsetX","offsetY","j","child","childId","visited","queue","shift","babelHelpers","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","prototype","objectTypes","function","freeExports","exports","nodeType","freeModule","module","freeGlobal","global","freeSelf","self","freeWindow","window","root","this","objectProto$2","toString","objectProto$1","Function","hasOwnProperty","RegExp","replace","arrayTag","objectProto","objToString","nativeIsArray","Array","SIZE","width","height","GRID","columns","rows","COL_REL_PADDING","ROW_REL_PADDING","CELL_REL_INNER_PADDING","ListGraphLayout","size","grid","scale","linear","_colRelPadding","_rowRelPadding","_cellRelInnerPadding","_grid","_size","arr","numLevels","level","rootIds","compileGlobalProps","nodes","nodesToMatrix","column","_columnWidth","padding","_colAbsPadding","contentWidth","_colAbsContentWidth","row","_rowHeight","_rowAbsPadding","contentHeight","_rowAbsContentHeight","cell","_cellAbsInnerPadding","allLinks","nodeLinks","newGrid","arguments","parseInt","updateScaling","domain","range","newSize","absolute"],"mappings":"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","file":"d3.layout.listGraph.min.js","sourcesContent":["/* Copyright Fritz Lekschas: D3 layout for list-based graphs */\nvar D3LayoutListGraph = (function (d3) { 'use strict';\n\n  d3 = 'default' in d3 ? d3['default'] : d3;\n\n  var babelHelpers = {};\n\n  babelHelpers.classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  babelHelpers.createClass = (function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })();\n\n  babelHelpers;\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = objectTypes[typeof self] && self && self.Object && self;\n\n  /** Detect free variable `window`. */\n  var freeWindow = objectTypes[typeof window] && window && window.Object && window;\n\n  /**\n   * Used as a reference to the global object.\n   *\n   * The `this` value is used if it's the global object to avoid Greasemonkey's\n   * restricted `window` object, otherwise the `window` object is used.\n   */\n  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;\n\n  /* Native method references for those with the same name as other `lodash` methods. */\n  var nativeIsFinite = root.isFinite;\n\n  /**\n   * Checks if `value` is a finite primitive number.\n   *\n   * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n   * @example\n   *\n   * _.isFinite(10);\n   * // => true\n   *\n   * _.isFinite('10');\n   * // => false\n   *\n   * _.isFinite(true);\n   * // => false\n   *\n   * _.isFinite(Object(10));\n   * // => false\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   */\n  function isFinite(value) {\n    return typeof value == 'number' && nativeIsFinite(value);\n  }\n\n  /**\n   * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    // Avoid a V8 JIT bug in Chrome 19-20.\n    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /** `Object#toString` result references. */\n  var funcTag = '[object Function]';\n\n  /** Used for native method references. */\n  var objectProto$2 = Object.prototype;\n\n  /**\n   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objToString$1 = objectProto$2.toString;\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in older versions of Chrome and Safari which return 'function' for regexes\n    // and Safari 8 which returns 'object' for typed array constructors.\n    return isObject(value) && objToString$1.call(value) == funcTag;\n  }\n\n  /**\n   * Checks if `value` is object-like.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /** Used to detect host constructors (Safari > 5). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used for native method references. */\n  var objectProto$1 = Object.prototype;\n\n  /** Used to resolve the decompiled source of functions. */\n  var fnToString = Function.prototype.toString;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto$1.hasOwnProperty;\n\n  /** Used to detect if a method is native. */\n  var reIsNative = RegExp('^' +\n    fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n  );\n\n  /**\n   * Checks if `value` is a native function.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n   * @example\n   *\n   * _.isNative(Array.prototype.push);\n   * // => true\n   *\n   * _.isNative(_);\n   * // => false\n   */\n  function isNative(value) {\n    if (value == null) {\n      return false;\n    }\n    if (isFunction(value)) {\n      return reIsNative.test(fnToString.call(value));\n    }\n    return isObjectLike(value) && reIsHostCtor.test(value);\n  }\n\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n  function getNative(object, key) {\n    var value = object == null ? undefined : object[key];\n    return isNative(value) ? value : undefined;\n  }\n\n  /**\n   * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n   * of an array-like value.\n   */\n  var MAX_SAFE_INTEGER = 9007199254740991;\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   */\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /** `Object#toString` result references. */\n  var arrayTag = '[object Array]';\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /**\n   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objToString = objectProto.toString;\n\n  /* Native method references for those with the same name as other `lodash` methods. */\n  var nativeIsArray = getNative(Array, 'isArray');\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(function() { return arguments; }());\n   * // => false\n   */\n  var isArray = nativeIsArray || function(value) {\n    return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n  };\n\n  /**\n   * Traverse graph in a breadth-first search fashion and process nodes along\n   * the traversal.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-13\n   *\n   * @private\n   * @method  traverseGraph\n   * @param  {Object}  graph  Graph to be traversed\n   * @param  {Array}  starts  Array of node IDs for start the traversal.\n   * @param  {Object}  columnCache  Cache storing node IDs per column.\n   * @param  {Object|Function}  scaleX  D3 linear scale function for the\n   *    x-axis, e.g. columns.\n   * @param  {Object|Function}  scaleY  D3 linear scale function for the\n   *    y-axis, e.g. rows.\n   */\n  function traverseGraph(graph, starts, columnCache, links, scaleX, scaleY) {\n    var j = undefined;\n    var child = undefined;\n    var childId = undefined;\n    var clone = undefined;\n    var node = undefined;\n    var visited = {};\n    var queue = [];\n    var cloneId = undefined;\n\n    /**\n     * Ensure that the bar values are in [0,1] and that the structure of `bars`\n     * is unified.\n     *\n     * @description\n     * Each node can feature a number of bars representing something. The layout\n     * can handle two structure, an object-based and an array-based structure.\n     *\n     * Object-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": {\n     *       \"propertyA\": 0.9,\n     *       \"propertyB\": 0.5\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Array-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": [{\n     *         \"id\": \"propertyA\",\n     *         \"value\": 0.9\n     *       }, {\n     *         \"id\": \"propertyB\",\n     *         \"value\": 0.5\n     *       }\n     *     ]\n     *   }\n     * }\n     * ```\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-18\n     *\n     * @method  processBars\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  node  Node to be processed.\n     */\n    function processBars(node) {\n      if (node.data.bars) {\n        if (isArray(node.data.bars)) {\n          for (var i = node.data.bars.length; i--;) {\n            node.data.bars[i].value = Math.max(Math.min(node.data.bars[i].value, 1), 0);\n          }\n        } else if (isObject(node.data.bars)) {\n          var bars = [];\n          var keys = Object.keys(node.data.bars);\n          for (var i = keys.length; i--;) {\n            node.data.bars[keys[i]] = Math.max(Math.min(node.data.bars[keys[i]], 1), 0);\n            bars.push({\n              id: keys[i],\n              value: node.data.bars[keys[i]]\n            });\n          }\n          node.data.bars = bars;\n        }\n      }\n    }\n\n    /**\n     * Process a node, e.g. assign `x` and `y`, clone node etc.\n     *\n     * @description\n     * Nodes are edited in place.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-13\n     *\n     * @method  processNode\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {String}  id  Node ID.\n     * @param  {Object}  node  Node to be processed.\n     * @param  {Object}  parent  Parent node.\n     * @param  {Boolean}  duplication  If `true` node is a duplication.\n     */\n    function processNode(id, node, parent, duplication) {\n      var _id = id;\n      var _node = node;\n\n      if (duplication) {\n        cloneId = id + '.' + node.clones.length + 1;\n        graph[cloneId] = {\n          children: [],\n          clone: true,\n          cloneId: node.clones.length + 1,\n          // Data will be referenced rather than copied to avoid inconsistencies\n          data: node.data,\n          originalId: id,\n          // Reference to the original node\n          originalNode: node\n        };\n        _id = cloneId;\n        _node = graph[cloneId];\n        // Add a reference to the original node that points to the clone.\n        node.clones.push(_node);\n      } else {\n        _node['clones'] = [];\n      }\n\n      _node.parent = parent;\n\n      if (!_node.childRefs) {\n        _node.childRefs = [];\n      }\n\n      if (parent) {\n        _node.depth = parent.depth + 1;\n        parent.childRefs.push(_node);\n      } else {\n        _node.depth = 0;\n      }\n\n      if (!_node.links) {\n        _node.links = [];\n      }\n\n      if (!columnCache[_node.depth]) {\n        columnCache[_node.depth] = {};\n      }\n\n      if (!columnCache[_node.depth][_id]) {\n        columnCache[_node.depth][_id] = true;\n        _node.x = scaleX(_node.depth);\n        _node.y = scaleY(Object.keys(columnCache[_node.depth]).length - 1);\n      }\n\n      processBars(_node);\n\n      if (parent) {\n        processLink(parent, _node);\n      }\n    }\n\n    /**\n     * Process outgoing links and add them to the source\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-17\n     *\n     * @method  processLink\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  source  Source node.\n     * @param  {Object}  target  Target node.\n     */\n    function processLink(source, target) {\n      source.links.push({\n        source: {\n          x: source.x,\n          y: source.y,\n          offsetX: 0,\n          offsetY: 0\n        },\n        target: {\n          x: target.x,\n          y: target.y,\n          offsetX: 0,\n          offsetY: 0\n        }\n      });\n    }\n\n    // BFS for each start node.\n    for (var i = starts.length; i--;) {\n      if (!graph[starts[i]]) {\n        return;\n      }\n\n      processNode(starts[i], graph[starts[i]]);\n\n      queue.push(starts[i]);\n      visited[starts[i]] = true;\n\n      while (queue.length > 0) {\n        node = graph[queue.shift()];\n\n        for (j = node.children.length; j--;) {\n          childId = node.children[j];\n          child = graph[childId];\n\n          if (!!child) {\n            if (!visited[childId]) {\n              queue.push(childId);\n              visited[childId] = true;\n              clone = false;\n            } else {\n              clone = true;\n            }\n\n            processNode(childId, child, node, clone);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Default size\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var SIZE = {\n    width: 300,\n    height: 300\n  };\n\n  /**\n   * Default grid\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var GRID = {\n    columns: 3,\n    rows: 3\n  };\n\n  /**\n   * Default relative padding of columns.\n   *\n   * @description\n   * Padding between columns refers to the left and right inner padding used\n   * for links between items in the column. Padding is relative to the overall\n   * width of the column.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var COL_REL_PADDING = 0.2;\n\n  /**\n   * Default relative padding of rows.\n   *\n   * @description\n   * Padding between rows refers to the top and bottom inner padding used to\n   * separate items vertically in the column. Padding is relative to the overall\n   * height of the row.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var ROW_REL_PADDING = 0.05;\n\n  /**\n   * Default inner padding of a cell relative to the shorter dimension, e.g.\n   * width or height.\n   *\n   * @type  {Number}\n   */\n  var CELL_REL_INNER_PADDING = 0.05;\n\n  var ListGraphLayout = (function () {\n    /**\n     * ListGraph class constructor.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @constructor\n     * @param  {Array|Object}  size  New size. Can either be an Array, e.g.\n     *   `[200,20]` or an Object, e.g. `{width: 200, height: 20}`.\n     * @param  {Array|Object}  grid  New grid configuration. Can either be an\n     *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n     */\n\n    function ListGraphLayout(size, grid) {\n      babelHelpers.classCallCheck(this, ListGraphLayout);\n\n      this.scale = {\n        x: d3.scale.linear(),\n        y: d3.scale.linear()\n      };\n\n      this._colRelPadding = COL_REL_PADDING;\n      this._rowRelPadding = ROW_REL_PADDING;\n      this._cellRelInnerPadding = CELL_REL_INNER_PADDING;\n\n      this._grid = {\n        columns: GRID.columns,\n        rows: GRID.rows\n      };\n\n      this._size = {\n        width: SIZE.width,\n        height: SIZE.height\n      };\n\n      this.grid(grid);\n      this.size(size);\n\n      this.columnCache = {};\n      this.columns = {};\n    }\n\n    /**\n     * Convert an object-based list of nodes into an array of arrays of nodes.\n     *\n     * @description\n     * Representing a graph using hierarchical data structures such as an Array is\n     * difficult. To save resources and avoid complex structures a graph is\n     * represented as a simple list of nodes. The list correspondes to an objects\n     * where the object's keys stand for node identifiers. This ensures uniqueness\n     * but has the disadvantage that D3 doesn't know what to do with it, thus we\n     * have to convert that structure into a fat array of array of nodes. It's\n     * important to notice that the nodes are *not* cloned into the array but\n     * instead simply linked using references.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @method  nodesToMatrix\n     * @memberOf  ListGraph\n     * @public\n     * @return  {Array}  Fat array of arrays of nodes.\n     */\n\n    babelHelpers.createClass(ListGraphLayout, [{\n      key: 'nodesToMatrix',\n      value: function nodesToMatrix() {\n        var arr = [];\n        var keys = undefined;\n        var numLevels = Object.keys(this.columnCache).length;\n\n        for (var i = 0; i < numLevels; i++) {\n          arr.push({\n            y: 0,\n            x: this.scale.x(i),\n            level: i,\n            rows: []\n          });\n          keys = Object.keys(this.columnCache[i]);\n          for (var j = keys.length; j--;) {\n            arr[i].rows.push(this.data[keys[j]]);\n          }\n        }\n\n        return arr;\n      }\n\n      /**\n       * Process original data and return an D3 ready Array.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-16\n       *\n       * @method  process\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Object}  data  Object list of nodes.\n       * @param  {Array}  rootIds  Array of node IDs to start traversal.\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'process',\n      value: function process(data, rootIds) {\n        this.data = data || this.data;\n        this.rootIds = rootIds || this.rootIds;\n\n        if (!isArray(this.rootIds)) {\n          this.rootIds = [this.rootIds];\n        }\n\n        traverseGraph(this.data, this.rootIds, this.columnCache, this.links, this.scale.x, this.scale.y);\n\n        return {\n          global: this.compileGlobalProps(),\n          nodes: this.nodesToMatrix()\n        };\n      }\n\n      /**\n       * Compiles an object of global properties of the visualization.\n       *\n       * @description\n       * Global properties comprise all properties that can be applied to globally\n       * across the visualization such as the width and padding of columns or the\n       * height and padding of rows.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-17\n       *\n       * @method  compileGlobalProps\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @return  {Object}  Object with global properties.\n       */\n\n    }, {\n      key: 'compileGlobalProps',\n      value: function compileGlobalProps() {\n        return {\n          column: {\n            width: this._columnWidth,\n            height: this._size.height,\n            padding: this._colAbsPadding,\n            contentWidth: this._colAbsContentWidth\n          },\n          row: {\n            height: this._rowHeight,\n            padding: this._rowAbsPadding,\n            contentHeight: this._rowAbsContentHeight\n          },\n          cell: {\n            padding: this._cellAbsInnerPadding\n          }\n        };\n      }\n\n      /**\n       * Returns the processed nodes as an Array of Array of nodes.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-16\n       *\n       * @method  nodes\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'nodes',\n      value: function nodes() {\n        return this.nodesToMatrix();\n      }\n\n      /**\n       * Returns an array of links per level, i.e. column, or all links.\n       *\n       * @description\n       * The column ID and level might be the same for small graphs but it's\n       * possible that the first column does not represent the root nodes. This is\n       * obviously the case when the user scrolls away.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  links\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Integer}  level  If given get's only links of a certain level. The\n       *   level of a node is relative to the length of the shortest path to the\n       *   root node.\n       * @return  {Array}  Array of objects containing the information for outgoing\n       *   links.\n       */\n\n    }, {\n      key: 'links',\n      value: function links(level) {\n        var allLinks = [],\n            source = undefined,\n            keys = undefined,\n            nodeLinks = undefined;\n\n        if (!isFinite(level)) {\n          source = this.data;\n        } else {\n          source = this.columnCache[level];\n        }\n\n        keys = source ? Object.keys(source) : [];\n\n        for (var i = keys.length; i--;) {\n          nodeLinks = this.data[keys[i]].links;\n          for (var j = nodeLinks.length; j--;) {\n            allLinks.push(nodeLinks[j]);\n          }\n        }\n\n        return allLinks;\n      }\n\n      /**\n       * Offset one end of all links per level vertically.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-18\n       *\n       * @method  offsetLinks\n       * @memberOf  ListGraph\n       * @public\n       * @category  Links\n       * @param  {Integer}  level  If given get's only links of a certain level. The\n       *   level of a node is relative to the length of the shortest path to the\n       *   root node.\n       * @param  {Number}  offsetY  The amount that one end of the link should be\n       *   offset vertically.\n       * @param  {String}  nodeType  Defines which end of the link should be\n       *   shifted. This can either be `source` or `traget`.\n       * @return  {Array}  Array of objects containing the information of the\n       *   modified outgoing links.\n       */\n\n    }, {\n      key: 'offsetLinks',\n      value: function offsetLinks(level, offsetY, nodeType) {\n        var links = this.links(level);\n\n        if ((nodeType === 'source' || nodeType === 'target') && isFinite(offsetY)) {\n          for (var i = links.length; i--;) {\n            links[i][nodeType].offsetY = offsetY;\n          }\n        }\n\n        return links;\n      }\n\n      /**\n       * Set or get the grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-10\n       *\n       * @method  grid\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @category  Data\n       * @param  {Array|Object}  newGrid  New grid configuration. Can either be an\n       *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'grid',\n      value: function grid(newGrid) {\n        if (!arguments.length) {\n          return this._grid;\n        }\n\n        if (isArray(newGrid)) {\n          this._grid.columns = parseInt(newGrid[0]) || this._grid.columns;\n          this._grid.rows = parseInt(newGrid[1]) || this._grid.rows;\n          this.updateScaling();\n        }\n\n        if (isObject(newGrid)) {\n          this._grid.columns = parseInt(newGrid.columns) || this._grid.columns;\n          this._grid.rows = parseInt(newGrid.rows) || this._grid.rows;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Updates scaling according to the size and grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  updateScaling\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'updateScaling',\n      value: function updateScaling() {\n        this.scale.x.domain([0, this._grid.columns]).range([0, this._size.width]);\n        this.scale.y.domain([0, this._grid.rows]).range([0, this._size.height]);\n\n        this._columnWidth = this._size.width / this._grid.columns;\n        this._rowHeight = this._size.height / this._grid.rows;\n\n        this._colAbsPadding = this._columnWidth * this._colRelPadding;\n        this._colAbsContentWidth = this._columnWidth * (1 - 2 * this._colRelPadding);\n\n        this._rowAbsPadding = this._rowHeight * this._rowRelPadding;\n        this._rowAbsContentHeight = this._rowHeight * (1 - 2 * this._rowRelPadding);\n\n        this._cellAbsInnerPadding = this._cellRelInnerPadding * Math.min(this._colAbsContentWidth, this._rowAbsContentHeight);\n\n        return this;\n      }\n\n      /**\n       * Set or get the size of the layout.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  size\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Array|Object}  newSize  New size. Can either be an Array, e.g.\n       *   `[200, 20]` or an Object, e.g. `{width: 200, height: 20}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'size',\n      value: function size(newSize) {\n        if (!arguments.length) {\n          return this._size;\n        }\n\n        if (isArray(newSize)) {\n          this._size.width = parseInt(newSize[0]) || this._size.width;\n          this._size.height = parseInt(newSize[1]) || this._size.height;\n          this.updateScaling();\n        }\n\n        if (isObject(newSize)) {\n          this._size.width = parseInt(newSize.width) || this._size.width;\n          this._size.height = parseInt(newSize.height) || this._size.height;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  columnPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0.1, 0.66].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of columns will be returned.\n       */\n\n    }, {\n      key: 'columnPadding',\n      value: function columnPadding(padding, absolute) {\n        if (!arguments.length) {\n          return this._colRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          if (absolute && isFinite(this._columnWidth)) {\n            padding = padding / this._columnWidth;\n          }\n          this._colRelPadding = Math.max(Math.min(padding, 0.66), 0.1);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  rowPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0, 0.5].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of rows will be returned.\n       */\n\n    }, {\n      key: 'rowPadding',\n      value: function rowPadding(padding, absolute) {\n        if (!arguments.length) {\n          return this._rowRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          if (absolute && isFinite(this._rowHeight)) {\n            padding = padding / this._rowHeight;\n          }\n          this._rowRelPadding = Math.max(Math.min(padding, 0.5), 0);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n    }]);\n    return ListGraphLayout;\n  })();\n\n  return ListGraphLayout;\n\n})(d3);"],"sourceRoot":"/source/"}