{"version":3,"sources":["d3.layout.listGraph.min.js"],"names":["d3","isFinite","value","nativeIsFinite","isObject","type","isFunction","objToString$1","call","funcTag","isObjectLike","isNative","reIsNative","test","fnToString","reIsHostCtor","getNative","object","key","undefined","isLength","MAX_SAFE_INTEGER","traverseGraph","graph","starts","columnCache","nodeOrder","links","scaleX","scaleY","processBars","node","data","bars","isArray","barRefs","i","length","Math","max","min","id","keys","Object","push","processNode","parent","duplication","_id","_node","depth","cloneId","clones","children","clone","originalId","originalNode","childRefs","x","y","processLink","source","target","offsetX","offsetY","j","child","childId","visited","queue","shift","babelHelpers","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","prototype","inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","possibleConstructorReturn","self","ReferenceError","objectTypes","function","freeExports","exports","nodeType","freeModule","module","freeGlobal","global","freeSelf","freeWindow","window","root","this","objectProto$2","toString","objectProto$1","Function","hasOwnProperty","RegExp","replace","arrayTag","objectProto","objToString","nativeIsArray","Array","ExtendableError","_Error","message","_this","getPrototypeOf","name","Error","captureStackTrace","NoRootNodes","_ExtendableError","SIZE","width","height","GRID","columns","rows","COL_REL_PADDING","ROW_REL_PADDING","CELL_REL_INNER_PADDING","ListGraphLayout","size","grid","scale","linear","_colRelPadding","_rowRelPadding","_cellRelInnerPadding","_grid","_size","columnNodeOrder","level","arr","start","end","rootIds","compileGlobalProps","nodes","nodesToMatrix","property","sortOrder","itr","getValue","obj","precision","recall","toLowerCase","sort","a","b","valueA","valueB","column","_columnWidth","padding","_colAbsPadding","contentWidth","_colAbsContentWidth","row","_rowHeight","_rowAbsPadding","contentHeight","_rowAbsContentHeight","cell","_cellAbsInnerPadding","startLevel","endLevel","allLinks","nodeLinks","concat","newGrid","arguments","parseInt","updateScaling","domain","range","newSize","absolute","layout","listGraph"],"mappings":"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","file":"d3.layout.listGraph.min.js","sourcesContent":["/* Copyright Fritz Lekschas: D3 layout for list-based graphs */\n(function (d3) { 'use strict';\n\n  var babelHelpers = {};\n\n  babelHelpers.classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  babelHelpers.createClass = (function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })();\n\n  babelHelpers.inherits = function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  babelHelpers.possibleConstructorReturn = function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n\n  babelHelpers;\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = objectTypes[typeof self] && self && self.Object && self;\n\n  /** Detect free variable `window`. */\n  var freeWindow = objectTypes[typeof window] && window && window.Object && window;\n\n  /**\n   * Used as a reference to the global object.\n   *\n   * The `this` value is used if it's the global object to avoid Greasemonkey's\n   * restricted `window` object, otherwise the `window` object is used.\n   */\n  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;\n\n  /* Native method references for those with the same name as other `lodash` methods. */\n  var nativeIsFinite = root.isFinite;\n\n  /**\n   * Checks if `value` is a finite primitive number.\n   *\n   * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n   * @example\n   *\n   * _.isFinite(10);\n   * // => true\n   *\n   * _.isFinite('10');\n   * // => false\n   *\n   * _.isFinite(true);\n   * // => false\n   *\n   * _.isFinite(Object(10));\n   * // => false\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   */\n  function isFinite(value) {\n    return typeof value == 'number' && nativeIsFinite(value);\n  }\n\n  /**\n   * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    // Avoid a V8 JIT bug in Chrome 19-20.\n    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /** `Object#toString` result references. */\n  var funcTag = '[object Function]';\n\n  /** Used for native method references. */\n  var objectProto$2 = Object.prototype;\n\n  /**\n   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objToString$1 = objectProto$2.toString;\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in older versions of Chrome and Safari which return 'function' for regexes\n    // and Safari 8 which returns 'object' for typed array constructors.\n    return isObject(value) && objToString$1.call(value) == funcTag;\n  }\n\n  /**\n   * Checks if `value` is object-like.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /** Used to detect host constructors (Safari > 5). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used for native method references. */\n  var objectProto$1 = Object.prototype;\n\n  /** Used to resolve the decompiled source of functions. */\n  var fnToString = Function.prototype.toString;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto$1.hasOwnProperty;\n\n  /** Used to detect if a method is native. */\n  var reIsNative = RegExp('^' +\n    fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n  );\n\n  /**\n   * Checks if `value` is a native function.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n   * @example\n   *\n   * _.isNative(Array.prototype.push);\n   * // => true\n   *\n   * _.isNative(_);\n   * // => false\n   */\n  function isNative(value) {\n    if (value == null) {\n      return false;\n    }\n    if (isFunction(value)) {\n      return reIsNative.test(fnToString.call(value));\n    }\n    return isObjectLike(value) && reIsHostCtor.test(value);\n  }\n\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n  function getNative(object, key) {\n    var value = object == null ? undefined : object[key];\n    return isNative(value) ? value : undefined;\n  }\n\n  /**\n   * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n   * of an array-like value.\n   */\n  var MAX_SAFE_INTEGER = 9007199254740991;\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   */\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /** `Object#toString` result references. */\n  var arrayTag = '[object Array]';\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /**\n   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objToString = objectProto.toString;\n\n  /* Native method references for those with the same name as other `lodash` methods. */\n  var nativeIsArray = getNative(Array, 'isArray');\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(function() { return arguments; }());\n   * // => false\n   */\n  var isArray = nativeIsArray || function(value) {\n    return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n  };\n\n  /**\n   * Traverse graph in a breadth-first search fashion and process nodes along\n   * the traversal.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-13\n   *\n   * @private\n   * @method  traverseGraph\n   * @param  {Object}  graph  Graph to be traversed\n   * @param  {Array}  starts  Array of node IDs for start the traversal.\n   * @param  {Object}  columnCache  Cache storing node IDs per column.\n   * @param  {Object|Function}  scaleX  D3 linear scale function for the\n   *    x-axis, e.g. columns.\n   * @param  {Object|Function}  scaleY  D3 linear scale function for the\n   *    y-axis, e.g. rows.\n   */\n  function traverseGraph(graph, starts, columnCache, nodeOrder, links, scaleX, scaleY) {\n    var j = undefined;\n    var child = undefined;\n    var childId = undefined;\n    var clone = undefined;\n    var node = undefined;\n    var visited = {};\n    var queue = [];\n    var cloneId = undefined;\n\n    /**\n     * Ensure that the bar values are in [0,1] and that the structure of `bars`\n     * is unified.\n     *\n     * @description\n     * Each node can feature a number of bars representing some value. The layout\n     * can handle two structure, an object-based and an array-based structure.\n     *\n     * Object-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": {\n     *       \"propertyA\": 0.9,\n     *       \"propertyB\": 0.5\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Array-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": [{\n     *         \"id\": \"propertyA\",\n     *         \"value\": 0.9\n     *       }, {\n     *         \"id\": \"propertyB\",\n     *         \"value\": 0.5\n     *       }\n     *     ]\n     *   }\n     * }\n     * ```\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-18\n     *\n     * @method  processBars\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  node  Node to be processed.\n     */\n    function processBars(node) {\n      if (node.data.bars) {\n        if (isArray(node.data.bars)) {\n          node.data.barRefs = {};\n          for (var i = node.data.bars.length; i--;) {\n            node.data.bars[i].value = Math.max(Math.min(node.data.bars[i].value, 1), 0);\n            node.data.barRefs[node.data.bars[i].id] = node.data.bars[i].value;\n          }\n        } else if (isObject(node.data.bars)) {\n          var bars = [];\n          var keys = Object.keys(node.data.bars);\n          // Keep the old object reference for quick access, e.g.\n          // `node.data.barRefs.precision`\n          node.data.barRefs = {};\n          for (var i = keys.length; i--;) {\n            node.data.barRefs[keys[i]] = Math.max(Math.min(node.data.bars[keys[i]], 1), 0);\n            bars.push({\n              id: keys[i],\n              value: node.data.barRefs[keys[i]]\n            });\n          }\n          node.data.bars = bars;\n        }\n      }\n    }\n\n    /**\n     * Process a node, e.g. assign `x` and `y`, clone node etc.\n     *\n     * @description\n     * Nodes are edited in place.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-13\n     *\n     * @method  processNode\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {String}  id  Node ID.\n     * @param  {Object}  node  Node to be processed.\n     * @param  {Object}  parent  Parent node.\n     * @param  {Boolean}  duplication  If `true` node is a duplication.\n     */\n    function processNode(id, node, parent, duplication) {\n      var _id = id;\n      var _node = node;\n\n      if (duplication) {\n        if (parent.depth + 1 !== node.depth) {\n          cloneId = id + '.' + node.clones.length + 1;\n          graph[cloneId] = {\n            children: [],\n            clone: true,\n            cloneId: node.clones.length + 1,\n            // Data will be referenced rather than copied to avoid inconsistencies\n            data: node.data,\n            originalId: id,\n            // Reference to the original node\n            originalNode: node\n          };\n          _id = cloneId;\n          _node = graph[cloneId];\n          // Add a reference to the original node that points to the clone.\n          node.clones.push(_node);\n        }\n      } else {\n        _node['clones'] = [];\n      }\n\n      _node.id = _id;\n\n      if (!_node.parent) {\n        _node.parent = [];\n      }\n      if (parent) {\n        _node.parent.push(parent);\n      }\n\n      if (!_node.childRefs) {\n        _node.childRefs = [];\n      }\n\n      if (parent) {\n        _node.depth = parent.depth + 1;\n        parent.childRefs.push(_node);\n      } else {\n        _node.depth = 0;\n      }\n\n      if (!_node.links) {\n        _node.links = [];\n      }\n\n      if (!columnCache[_node.depth]) {\n        columnCache[_node.depth] = {};\n        nodeOrder[_node.depth] = [];\n      }\n\n      if (!columnCache[_node.depth][_id]) {\n        columnCache[_node.depth][_id] = true;\n        nodeOrder[_node.depth].push(_node);\n        _node.x = scaleX(_node.depth);\n        _node.y = scaleY(Object.keys(columnCache[_node.depth]).length - 1);\n      }\n\n      processBars(_node);\n\n      if (parent) {\n        processLink(parent, _node);\n      }\n    }\n\n    /**\n     * Process outgoing links and add them to the source\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-17\n     *\n     * @method  processLink\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  source  Source node.\n     * @param  {Object}  target  Target node.\n     */\n    function processLink(source, target) {\n      source.links.push({\n        id: '(' + source.id + ')->(' + target.id + ')',\n        source: {\n          node: source,\n          offsetX: 0,\n          offsetY: 0\n        },\n        target: {\n          node: target,\n          offsetX: 0,\n          offsetY: 0\n        }\n      });\n    }\n\n    // BFS for each start node.\n    for (var i = starts.length; i--;) {\n      if (!graph[starts[i]]) {\n        return;\n      }\n\n      processNode(starts[i], graph[starts[i]]);\n\n      queue.push(starts[i]);\n      visited[starts[i]] = true;\n\n      while (queue.length > 0) {\n        node = graph[queue.shift()];\n\n        for (j = node.children.length; j--;) {\n          childId = node.children[j];\n          child = graph[childId];\n\n          if (!!child) {\n            if (!visited[childId]) {\n              queue.push(childId);\n              visited[childId] = true;\n              clone = false;\n            } else {\n              clone = true;\n            }\n\n            processNode(childId, child, node, clone);\n          }\n        }\n      }\n    }\n  }\n\n  var ExtendableError = (function (_Error) {\n    babelHelpers.inherits(ExtendableError, _Error);\n\n    function ExtendableError(message) {\n      babelHelpers.classCallCheck(this, ExtendableError);\n\n      var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(ExtendableError).call(this, message));\n\n      _this.name = _this.constructor.name;\n      _this.message = message;\n      Error.captureStackTrace(_this, _this.constructor.name);\n      return _this;\n    }\n\n    return ExtendableError;\n  })(Error);\n\n  var NoRootNodes = (function (_ExtendableError) {\n    babelHelpers.inherits(NoRootNodes, _ExtendableError);\n\n    function NoRootNodes(message) {\n      babelHelpers.classCallCheck(this, NoRootNodes);\n      return babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(NoRootNodes).call(this, message || 'No root node IDs specified.'));\n    }\n\n    return NoRootNodes;\n  })(ExtendableError);\n\n  /**\n   * Default size\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var SIZE = {\n    width: 300,\n    height: 300\n  };\n\n  /**\n   * Default grid\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var GRID = {\n    columns: 3,\n    rows: 3\n  };\n\n  /**\n   * Default relative padding of columns.\n   *\n   * @description\n   * Padding between columns refers to the left and right inner padding used\n   * for links between items in the column. Padding is relative to the overall\n   * width of the column.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var COL_REL_PADDING = 0.2;\n\n  /**\n   * Default relative padding of rows.\n   *\n   * @description\n   * Padding between rows refers to the top and bottom inner padding used to\n   * separate items vertically in the column. Padding is relative to the overall\n   * height of the row.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var ROW_REL_PADDING = 0.05;\n\n  /**\n   * Default inner padding of a cell relative to the shorter dimension, e.g.\n   * width or height.\n   *\n   * @type  {Number}\n   */\n  var CELL_REL_INNER_PADDING = 0.05;\n\n  var ListGraphLayout = (function () {\n    /**\n     * ListGraph class constructor.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @constructor\n     * @param  {Array|Object}  size  New size. Can either be an Array, e.g.\n     *   `[200,20]` or an Object, e.g. `{width: 200, height: 20}`.\n     * @param  {Array|Object}  grid  New grid configuration. Can either be an\n     *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n     */\n\n    function ListGraphLayout(size, grid) {\n      babelHelpers.classCallCheck(this, ListGraphLayout);\n\n      this.scale = {\n        x: d3.scale.linear(),\n        y: d3.scale.linear()\n      };\n\n      this._colRelPadding = COL_REL_PADDING;\n      this._rowRelPadding = ROW_REL_PADDING;\n      this._cellRelInnerPadding = CELL_REL_INNER_PADDING;\n\n      this._grid = {\n        columns: GRID.columns,\n        rows: GRID.rows\n      };\n\n      this._size = {\n        width: SIZE.width,\n        height: SIZE.height\n      };\n\n      this.grid(grid);\n      this.size(size);\n\n      this.columnCache = {};\n      this.columns = {};\n      this.columnNodeOrder = {};\n    }\n\n    /**\n     * Convert an object-based list of nodes into an array of arrays of nodes.\n     *\n     * @description\n     * Representing a graph using hierarchical data structures such as an Array is\n     * difficult. To save resources and avoid complex structures a graph is\n     * represented as a simple list of nodes. The list correspondes to an objects\n     * where the object's keys stand for node identifiers. This ensures uniqueness\n     * but has the disadvantage that D3 doesn't know what to do with it, thus we\n     * have to convert that structure into a fat array of array of nodes. It's\n     * important to notice that the nodes are *not* cloned into the array but\n     * instead simply linked using references.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-12-04\n     *\n     * @method  nodesToMatrix\n     * @memberOf  ListGraph\n     * @public\n     * @param  {Integer}  Level for which nodes should be returned.\n     * @return  {Array}  Fat array of arrays of nodes.\n     */\n\n    babelHelpers.createClass(ListGraphLayout, [{\n      key: 'nodesToMatrix',\n      value: function nodesToMatrix(level) {\n        var arr = [];\n        var keys = undefined;\n        var start = 0;\n        var end = Object.keys(this.columnCache).length;\n\n        if (isFinite(level)) {\n          start = level;\n          end = level + 1;\n        }\n\n        for (var i = start; i < end; i++) {\n          arr.push({\n            y: 0,\n            x: this.scale.x(i),\n            level: i,\n            rows: []\n          });\n          keys = Object.keys(this.columnCache[i]);\n          for (var j = keys.length; j--;) {\n            arr[i - start].rows.push(this.data[keys[j]]);\n          }\n        }\n\n        return arr;\n      }\n\n      /**\n       * Process original data and return an D3 ready Array.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-16\n       *\n       * @method  process\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Object}  data  Object list of nodes.\n       * @param  {Array}  rootIds  Array of node IDs to start traversal.\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'process',\n      value: function process(data, rootIds) {\n        this.data = data || this.data;\n        this.rootIds = rootIds || this.rootIds;\n\n        if (!isArray(this.rootIds)) {\n          if (isFinite(this.rootIds)) {\n            this.rootIds = [this.rootIds];\n          } else {\n            throw new NoRootNodes('No root node IDs specified.');\n          }\n        }\n\n        traverseGraph(this.data, this.rootIds, this.columnCache, this.columnNodeOrder, this.links, this.scale.x, this.scale.y);\n\n        return {\n          global: this.compileGlobalProps(),\n          nodes: this.nodesToMatrix()\n        };\n      }\n\n      /**\n       * Sorts nodes of a all or a specific level according to a property and order.\n       *\n       * @description\n       * Currently only nodes can be sorted by _precision_, _recall_ or by name.\n       *\n       * @method  sort\n       * @author  Fritz Lekschas\n       * @date    2015-12-04\n       * @param  {Integer}  level  Specifies the level which should be sorted.\n       * @param  {String}  property   The property used for sorting. Can be one of\n       *   ['precision', 'recall', 'name'].\n       * @param  {Integer}  sortOrder  If `1` sort asc. If `-1` sort desc.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'sort',\n      value: function sort(level, property, sortOrder) {\n        var allLinks = [],\n            itr = 0,\n            end = this.columnCache.length,\n            getValue = undefined;\n\n        // 1 = asc, -1 = desc\n        sortOrder = sortOrder === 1 ? 1 : -1;\n\n        switch (property) {\n          case 'precision':\n            getValue = function (obj) {\n              return obj.data.barRefs.precision;\n            };\n            break;\n          case 'recall':\n            getValue = function (obj) {\n              return obj.data.barRefs.recall;\n            };\n            break;\n          default:\n            getValue = function (obj) {\n              return obj.data.name.toLowerCase();\n            };\n            break;\n        }\n\n        if (isFinite(level)) {\n          itr = level;\n          end = level + 1;\n        }\n\n        for (itr; itr < end; itr++) {\n          this.columnNodeOrder[itr].sort(function (a, b) {\n            var valueA = getValue(a);\n            var valueB = getValue(b);\n            return valueA > valueB ? sortOrder : valueA < valueB ? -sortOrder : 0;\n          });\n\n          // Update `y` according to the new position.\n          for (var i = this.columnNodeOrder[itr].length; i--;) {\n            this.columnNodeOrder[itr][i].y = this.scale.y(i);\n          }\n        }\n\n        return this;\n      }\n\n      /**\n       * Compiles an object of global properties of the visualization.\n       *\n       * @description\n       * Global properties comprise all properties that can be applied to globally\n       * across the visualization such as the width and padding of columns or the\n       * height and padding of rows.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-17\n       *\n       * @method  compileGlobalProps\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @return  {Object}  Object with global properties.\n       */\n\n    }, {\n      key: 'compileGlobalProps',\n      value: function compileGlobalProps() {\n        return {\n          column: {\n            width: this._columnWidth,\n            height: this._size.height,\n            padding: this._colAbsPadding,\n            contentWidth: this._colAbsContentWidth\n          },\n          row: {\n            height: this._rowHeight,\n            padding: this._rowAbsPadding,\n            contentHeight: this._rowAbsContentHeight\n          },\n          cell: {\n            padding: this._cellAbsInnerPadding\n          }\n        };\n      }\n\n      /**\n       * Returns the processed nodes as an Array of Array of nodes.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-16\n       *\n       * @method  nodes\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Integer}  Level for which nodes should be returned.\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'nodes',\n      value: function nodes(level) {\n        return this.nodesToMatrix(level);\n      }\n\n      /**\n       * Returns an array of outgoing links per level, i.e. column, or all outgoing\n       * links.\n       *\n       * @description\n       * The column ID and level might be the same for small graphs but it's\n       * possible that the first column does not represent the first level.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-12-04\n       *\n       * @method  links\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Integer}  startLevel  Start level for returning links. If `to` is\n       *   not specified that only links from `start` level are returned.\n       * @param  {Integer}  endLevel  End level for returning links. So all links\n       *   from `start` to `to` (including) will be returned\n       * @return  {Array}  Array of objects containing the information for outgoing\n       *   links.\n       */\n\n    }, {\n      key: 'links',\n      value: function links(startLevel, endLevel) {\n        var allLinks = [],\n            keys = [],\n            nodeLinks = undefined;\n\n        if (!isFinite(startLevel)) {\n          keys = Object.keys(this.data);\n        } else {\n          startLevel = Math.max(startLevel, 0);\n          endLevel = isFinite(endLevel) ? Math.min(endLevel, Object.keys(this.columnCache).length) : startLevel + 1;\n\n          for (var i = startLevel; i < endLevel; i++) {\n            keys = keys.concat(Object.keys(this.columnCache[i]));\n          }\n        }\n\n        for (var i = keys.length; i--;) {\n          nodeLinks = this.data[keys[i]].links;\n          for (var j = nodeLinks.length; j--;) {\n            allLinks.push(nodeLinks[j]);\n          }\n        }\n\n        return allLinks;\n      }\n\n      /**\n       * Offset one end of all links per level vertically.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-18\n       *\n       * @method  offsetLinks\n       * @memberOf  ListGraph\n       * @public\n       * @category  Links\n       * @param  {Integer}  level  If given get's only links of a certain level. The\n       *   level of a node is relative to the length of the shortest path to the\n       *   root node.\n       * @param  {Number}  offsetY  The amount that one end of the link should be\n       *   offset vertically.\n       * @param  {String}  nodeType  Defines which end of the link should be\n       *   shifted. This can either be `source` or `traget`.\n       * @return  {Array}  Array of objects containing the information of the\n       *   modified outgoing links.\n       */\n\n    }, {\n      key: 'offsetLinks',\n      value: function offsetLinks(level, offsetY, nodeType) {\n        var links = this.links(level);\n\n        if ((nodeType === 'source' || nodeType === 'target') && isFinite(offsetY)) {\n          for (var i = links.length; i--;) {\n            links[i][nodeType].offsetY = offsetY;\n          }\n        }\n\n        return links;\n      }\n\n      /**\n       * Set or get the grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-10\n       *\n       * @method  grid\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @category  Data\n       * @param  {Array|Object}  newGrid  New grid configuration. Can either be an\n       *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'grid',\n      value: function grid(newGrid) {\n        if (!arguments.length) {\n          return this._grid;\n        }\n\n        if (isArray(newGrid)) {\n          this._grid.columns = parseInt(newGrid[0]) || this._grid.columns;\n          this._grid.rows = parseInt(newGrid[1]) || this._grid.rows;\n          this.updateScaling();\n        }\n\n        if (isObject(newGrid)) {\n          this._grid.columns = parseInt(newGrid.columns) || this._grid.columns;\n          this._grid.rows = parseInt(newGrid.rows) || this._grid.rows;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Updates scaling according to the size and grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  updateScaling\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'updateScaling',\n      value: function updateScaling() {\n        this.scale.x.domain([0, this._grid.columns]).range([0, this._size.width]);\n        this.scale.y.domain([0, this._grid.rows]).range([0, this._size.height]);\n\n        this._columnWidth = this._size.width / this._grid.columns;\n        this._rowHeight = this._size.height / this._grid.rows;\n\n        this._colAbsPadding = this._columnWidth * this._colRelPadding;\n        this._colAbsContentWidth = this._columnWidth * (1 - 2 * this._colRelPadding);\n\n        this._rowAbsPadding = this._rowHeight * this._rowRelPadding;\n        this._rowAbsContentHeight = this._rowHeight * (1 - 2 * this._rowRelPadding);\n\n        this._cellAbsInnerPadding = this._cellRelInnerPadding * Math.min(this._colAbsContentWidth, this._rowAbsContentHeight);\n\n        return this;\n      }\n\n      /**\n       * Set or get the size of the layout.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  size\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Array|Object}  newSize  New size. Can either be an Array, e.g.\n       *   `[200, 20]` or an Object, e.g. `{width: 200, height: 20}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'size',\n      value: function size(newSize) {\n        if (!arguments.length) {\n          return this._size;\n        }\n\n        if (isArray(newSize)) {\n          this._size.width = parseInt(newSize[0]) || this._size.width;\n          this._size.height = parseInt(newSize[1]) || this._size.height;\n          this.updateScaling();\n        }\n\n        if (isObject(newSize)) {\n          this._size.width = parseInt(newSize.width) || this._size.width;\n          this._size.height = parseInt(newSize.height) || this._size.height;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  columnPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0.1, 0.66].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of columns will be returned.\n       */\n\n    }, {\n      key: 'columnPadding',\n      value: function columnPadding(padding, absolute) {\n        if (!arguments.length) {\n          return this._colRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          if (absolute && isFinite(this._columnWidth)) {\n            padding = padding / this._columnWidth;\n          }\n          this._colRelPadding = Math.max(Math.min(padding, 0.66), 0.1);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  rowPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0, 0.5].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of rows will be returned.\n       */\n\n    }, {\n      key: 'rowPadding',\n      value: function rowPadding(padding, absolute) {\n        if (!arguments.length) {\n          return this._rowRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          if (absolute && isFinite(this._rowHeight)) {\n            padding = padding / this._rowHeight;\n          }\n          this._rowRelPadding = Math.max(Math.min(padding, 0.5), 0);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n    }]);\n    return ListGraphLayout;\n  })();\n\n  d3.layout.listGraph = ListGraphLayout;\n\n})(d3);"],"sourceRoot":"/source/"}