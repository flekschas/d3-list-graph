{"version":3,"sources":["d3.layout.listGraph.min.js"],"names":["d3","isFinite","value","nativeIsFinite","isObject","type","isFunction","objToString$1","call","funcTag","isObjectLike","isNative","reIsNative","test","fnToString","reIsHostCtor","getNative","object","key","undefined","isLength","MAX_SAFE_INTEGER","traverseGraph","graph","starts","columnCache","nodeOrder","links","scaleX","scaleY","processBars","node","data","bars","isArray","barRefs","i","len","length","Math","max","min","barId","id","keys","Object","push","processLink","source","target","offsetX","offsetY","processNode","parent","duplication","_id","toString","_node","depth","cloneId","clones","children","clone","originalId","originalNode","parents","childRefs","x","y","addSiblings","j","siblings","visited","queue","child","childId","shift","babelHelpers","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","prototype","inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","possibleConstructorReturn","self","ReferenceError","objectTypes","function","freeExports","exports","nodeType","freeModule","module","freeGlobal","global","freeSelf","freeWindow","window","root","this","objectProto$2","objectProto$1","Function","hasOwnProperty","RegExp","replace","arrayTag","objectProto","objToString","nativeIsArray","Array","ExtendableError","_Error","message","_this","getPrototypeOf","name","Error","captureStackTrace","NoRootNodes","_ExtendableError","SIZE","width","height","GRID","columns","rows","COL_REL_PADDING","ROW_REL_PADDING","CELL_REL_INNER_PADDING","ListGraphLayout","size","grid","scale","linear","_colRelPadding","_rowRelPadding","_cellRelInnerPadding","_grid","_size","columnNodeOrder","columnSorting","level","arr","start","end","sortBy","by","sortOrder","order","rootIds","options","sort","compileGlobalProps","nodes","nodesToMatrix","property","itr","getValue","sortProperty","numericSortOrder","obj","precision","recall","toLowerCase","a","b","valueA","valueB","column","_columnWidth","padding","_colAbsPadding","contentWidth","_colAbsContentWidth","row","_rowHeight","_rowAbsPadding","contentHeight","_rowAbsContentHeight","cell","_cellAbsInnerPadding","startLevel","endLevel","allLinks","nodeLinks","normStartLevel","normEndLevel","concat","newGrid","arguments","parseInt","updateScaling","nodesId","barsData","skipped","hidden","domain","range","newSize","absolute","relPadding","layout","listGraph"],"mappings":"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","file":"d3.layout.listGraph.min.js","sourcesContent":["/* Copyright Fritz Lekschas: D3 layout for list-based graphs */\n(function (d3) { 'use strict';\n\n  var babelHelpers = {};\n\n  babelHelpers.classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  babelHelpers.createClass = (function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })();\n\n  babelHelpers.inherits = function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  babelHelpers.possibleConstructorReturn = function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n\n  babelHelpers;\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = objectTypes[typeof self] && self && self.Object && self;\n\n  /** Detect free variable `window`. */\n  var freeWindow = objectTypes[typeof window] && window && window.Object && window;\n\n  /**\n   * Used as a reference to the global object.\n   *\n   * The `this` value is used if it's the global object to avoid Greasemonkey's\n   * restricted `window` object, otherwise the `window` object is used.\n   */\n  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;\n\n  /* Native method references for those with the same name as other `lodash` methods. */\n  var nativeIsFinite = root.isFinite;\n\n  /**\n   * Checks if `value` is a finite primitive number.\n   *\n   * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n   * @example\n   *\n   * _.isFinite(10);\n   * // => true\n   *\n   * _.isFinite('10');\n   * // => false\n   *\n   * _.isFinite(true);\n   * // => false\n   *\n   * _.isFinite(Object(10));\n   * // => false\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   */\n  function isFinite(value) {\n    return typeof value == 'number' && nativeIsFinite(value);\n  }\n\n  /**\n   * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    // Avoid a V8 JIT bug in Chrome 19-20.\n    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /** `Object#toString` result references. */\n  var funcTag = '[object Function]';\n\n  /** Used for native method references. */\n  var objectProto$2 = Object.prototype;\n\n  /**\n   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objToString$1 = objectProto$2.toString;\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in older versions of Chrome and Safari which return 'function' for regexes\n    // and Safari 8 which returns 'object' for typed array constructors.\n    return isObject(value) && objToString$1.call(value) == funcTag;\n  }\n\n  /**\n   * Checks if `value` is object-like.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /** Used to detect host constructors (Safari > 5). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used for native method references. */\n  var objectProto$1 = Object.prototype;\n\n  /** Used to resolve the decompiled source of functions. */\n  var fnToString = Function.prototype.toString;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto$1.hasOwnProperty;\n\n  /** Used to detect if a method is native. */\n  var reIsNative = RegExp('^' +\n    fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n  );\n\n  /**\n   * Checks if `value` is a native function.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n   * @example\n   *\n   * _.isNative(Array.prototype.push);\n   * // => true\n   *\n   * _.isNative(_);\n   * // => false\n   */\n  function isNative(value) {\n    if (value == null) {\n      return false;\n    }\n    if (isFunction(value)) {\n      return reIsNative.test(fnToString.call(value));\n    }\n    return isObjectLike(value) && reIsHostCtor.test(value);\n  }\n\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n  function getNative(object, key) {\n    var value = object == null ? undefined : object[key];\n    return isNative(value) ? value : undefined;\n  }\n\n  /**\n   * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n   * of an array-like value.\n   */\n  var MAX_SAFE_INTEGER = 9007199254740991;\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   */\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /** `Object#toString` result references. */\n  var arrayTag = '[object Array]';\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /**\n   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objToString = objectProto.toString;\n\n  /* Native method references for those with the same name as other `lodash` methods. */\n  var nativeIsArray = getNative(Array, 'isArray');\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(function() { return arguments; }());\n   * // => false\n   */\n  var isArray = nativeIsArray || function(value) {\n    return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n  };\n\n  /**\n   * Traverse graph in a breadth-first search fashion and process nodes along\n   * the traversal.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-13\n   *\n   * @private\n   * @method  traverseGraph\n   * @param  {Object}  graph  Graph to be traversed\n   * @param  {Array}  starts  Array of node IDs for start the traversal.\n   * @param  {Object}  columnCache  Cache storing node IDs per column.\n   * @param  {Object|Function}  scaleX  D3 linear scale function for the\n   *    x-axis, e.g. columns.\n   * @param  {Object|Function}  scaleY  D3 linear scale function for the\n   *    y-axis, e.g. rows.\n   */\n  function traverseGraph(graph, starts, columnCache, nodeOrder, links, scaleX, scaleY) {\n    var visited = {};\n    var queue = [];\n\n    var child = undefined;\n    var childId = undefined;\n    var clone = undefined;\n    var node = undefined;\n    var cloneId = undefined;\n\n    /**\n     * Ensure that the bar values are in [0,1] and that the structure of `bars`\n     * is unified.\n     *\n     * @description\n     * Each node can feature a number of bars representing some value. The layout\n     * can handle two structure, an object-based and an array-based structure.\n     *\n     * Object-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": {\n     *       \"propertyA\": 0.9,\n     *       \"propertyB\": 0.5\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Array-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": [{\n     *         \"id\": \"propertyA\",\n     *         \"value\": 0.9\n     *       }, {\n     *         \"id\": \"propertyB\",\n     *         \"value\": 0.5\n     *       }\n     *     ]\n     *   }\n     * }\n     * ```\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-18\n     *\n     * @method  processBars\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  node  Node to be processed.\n     */\n    function processBars(node) {\n      // eslint-disable-line no-shadow\n      if (node.data.bars) {\n        if (isArray(node.data.bars)) {\n          node.data.barRefs = {};\n          for (var i = 0, len = node.data.bars.length; i < len; i++) {\n            node.data.bars[i].value = Math.max(Math.min(node.data.bars[i].value, 1), 0);\n            node.data.bars[i].barId = node.id + '.' + node.data.bars[i].id;\n            node.data.barRefs[node.data.bars[i].id] = node.data.bars[i].value;\n          }\n        } else if (isObject(node.data.bars)) {\n          var bars = [];\n          var keys = Object.keys(node.data.bars);\n          // Keep the old object reference for quick access, e.g.\n          // `node.data.barRefs.precision`\n          node.data.barRefs = {};\n          for (var i = 0, len = keys.length; i < len; i++) {\n            node.data.barRefs[keys[i]] = Math.max(Math.min(node.data.bars[keys[i]], 1), 0);\n            bars.push({\n              barId: node.id + '.' + keys[i],\n              id: keys[i],\n              value: node.data.barRefs[keys[i]]\n            });\n          }\n          node.data.bars = bars;\n        }\n      }\n    }\n\n    /**\n     * Process outgoing links and add them to the source\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-17\n     *\n     * @method  processLink\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  source  Source node.\n     * @param  {Object}  target  Target node.\n     */\n    function processLink(source, target) {\n      source.links.push({\n        id: '(' + source.id + ')->(' + target.id + ')',\n        source: {\n          node: source,\n          offsetX: 0,\n          offsetY: 0\n        },\n        target: {\n          node: target,\n          offsetX: 0,\n          offsetY: 0\n        }\n      });\n    }\n\n    /**\n     * Process a node, e.g. assign `x` and `y`, clone node etc.\n     *\n     * @description\n     * Nodes are edited in place.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-13\n     *\n     * @method  processNode\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {String}  id  Node ID.\n     * @param  {Object}  node  Node to be processed.\n     * @param  {Object}  parent  Parent node.\n     * @param  {Boolean}  duplication  If `true` node is a duplication.\n     */\n    function processNode(id, node, parent, duplication) {\n      // eslint-disable-line no-shadow\n      var _id = id.toString();\n      var _node = node;\n\n      if (duplication) {\n        if (parent.depth + 1 !== node.depth) {\n          cloneId = id + '.' + (node.clones.length + 1);\n          graph[cloneId] = {\n            children: [],\n            clone: true,\n            cloneId: node.clones.length + 1,\n            // Data will be referenced rather than copied to avoid inconsistencies\n            data: node.data,\n            originalId: id.toString(),\n            // Reference to the original node\n            originalNode: node\n          };\n          _id = cloneId;\n          _node = graph[cloneId];\n          // Add a reference to the original node that points to the clone.\n          node.clones.push(_node);\n          // Remove parent\n          node.parents[parent.id] = undefined;\n          delete node.parents[parent.id];\n        }\n      } else {\n        _node.clones = [];\n      }\n\n      _node.id = _id;\n\n      if (!_node.parents) {\n        _node.parents = {};\n      }\n      if (parent) {\n        _node.parents[parent.id] = parent;\n      } else {\n        _node.parents = {};\n      }\n\n      if (!_node.childRefs) {\n        _node.childRefs = [];\n      }\n\n      if (parent) {\n        _node.depth = parent.depth + 1;\n        parent.childRefs.push(_node);\n      } else {\n        _node.depth = 0;\n      }\n\n      if (!_node.links) {\n        _node.links = [];\n      }\n\n      if (!columnCache[_node.depth]) {\n        columnCache[_node.depth] = {};\n        nodeOrder[_node.depth] = [];\n      }\n\n      if (!columnCache[_node.depth][_id]) {\n        columnCache[_node.depth][_id] = true;\n        nodeOrder[_node.depth].push(_node);\n        _node.x = scaleX(_node.depth);\n        _node.y = scaleY(Object.keys(columnCache[_node.depth]).length - 1);\n      }\n\n      processBars(_node);\n\n      if (parent) {\n        processLink(parent, _node);\n      }\n    }\n\n    function addSiblings() {\n      for (var i = starts.length; i--;) {\n        for (var j = starts.length; j--;) {\n          if (i !== j) {\n            if (!graph[starts[i]].siblings) {\n              graph[starts[i]].siblings = {};\n            }\n            graph[starts[i]].siblings[starts[j]] = graph[starts[j]];\n          }\n        }\n      }\n    }\n\n    // BFS for each start node.\n    for (var i = starts.length; i--;) {\n      if (!graph[starts[i]]) {\n        return;\n      }\n\n      processNode(starts[i], graph[starts[i]]);\n\n      queue.push(starts[i]);\n      visited[starts[i]] = true;\n\n      while (queue.length > 0) {\n        node = graph[queue.shift()];\n\n        for (var j = node.children.length; j--;) {\n          childId = node.children[j];\n          child = graph[childId];\n\n          if (!!child) {\n            if (!visited[childId]) {\n              queue.push(childId);\n              visited[childId] = true;\n              clone = false;\n            } else {\n              clone = true;\n            }\n\n            processNode(childId, child, node, clone);\n          }\n        }\n      }\n    }\n\n    addSiblings();\n  }\n\n  var ExtendableError = (function (_Error) {\n    babelHelpers.inherits(ExtendableError, _Error);\n\n    function ExtendableError(message) {\n      babelHelpers.classCallCheck(this, ExtendableError);\n\n      var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(ExtendableError).call(this, message));\n\n      _this.name = _this.constructor.name;\n      _this.message = message;\n      Error.captureStackTrace(_this, _this.constructor.name);\n      return _this;\n    }\n\n    return ExtendableError;\n  })(Error);\n\n  var NoRootNodes = (function (_ExtendableError) {\n    babelHelpers.inherits(NoRootNodes, _ExtendableError);\n\n    function NoRootNodes(message) {\n      babelHelpers.classCallCheck(this, NoRootNodes);\n      return babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(NoRootNodes).call(this, message || 'No root node IDs specified.'));\n    }\n\n    return NoRootNodes;\n  })(ExtendableError);\n\n  /**\n   * Default size\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var SIZE = {\n    width: 300,\n    height: 300\n  };\n\n  /**\n   * Default grid\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var GRID = {\n    columns: 3,\n    rows: 3\n  };\n\n  /**\n   * Default relative padding of columns.\n   *\n   * @description\n   * Padding between columns refers to the left and right inner padding used\n   * for links between items in the column. Padding is relative to the overall\n   * width of the column.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var COL_REL_PADDING = 0.2;\n\n  /**\n   * Default relative padding of rows.\n   *\n   * @description\n   * Padding between rows refers to the top and bottom inner padding used to\n   * separate items vertically in the column. Padding is relative to the overall\n   * height of the row.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var ROW_REL_PADDING = 0.05;\n\n  /**\n   * Default inner padding of a cell relative to the shorter dimension, e.g.\n   * width or height.\n   *\n   * @type  {Number}\n   */\n  var CELL_REL_INNER_PADDING = 0.05;\n\n  var ListGraphLayout = (function () {\n    /**\n     * ListGraph class constructor.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @constructor\n     * @param  {Array|Object}  size  New size. Can either be an Array, e.g.\n     *   `[200,20]` or an Object, e.g. `{width: 200, height: 20}`.\n     * @param  {Array|Object}  grid  New grid configuration. Can either be an\n     *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n     */\n\n    function ListGraphLayout(size, grid) {\n      babelHelpers.classCallCheck(this, ListGraphLayout);\n\n      this.scale = {\n        x: d3.scale.linear(),\n        y: d3.scale.linear()\n      };\n\n      this._colRelPadding = COL_REL_PADDING;\n      this._rowRelPadding = ROW_REL_PADDING;\n      this._cellRelInnerPadding = CELL_REL_INNER_PADDING;\n\n      this._grid = {\n        columns: GRID.columns,\n        rows: GRID.rows\n      };\n\n      this._size = {\n        width: SIZE.width,\n        height: SIZE.height\n      };\n\n      this.grid(grid);\n      this.size(size);\n\n      this.columnCache = {};\n      this.columns = {};\n      this.columnNodeOrder = {};\n      this.columnSorting = {};\n    }\n\n    /**\n     * Convert an object-based list of nodes into an array of arrays of nodes.\n     *\n     * @description\n     * Representing a graph using hierarchical data structures such as an Array is\n     * difficult. To save resources and avoid complex structures a graph is\n     * represented as a simple list of nodes. The list correspondes to an objects\n     * where the object's keys stand for node identifiers. This ensures uniqueness\n     * but has the disadvantage that D3 doesn't know what to do with it, thus we\n     * have to convert that structure into a fat array of array of nodes. It's\n     * important to notice that the nodes are *not* cloned into the array but\n     * instead simply linked using references.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-12-04\n     *\n     * @method  nodesToMatrix\n     * @memberOf  ListGraph\n     * @public\n     * @param  {Integer}  Level for which nodes should be returned.\n     * @return  {Array}  Fat array of arrays of nodes.\n     */\n\n    babelHelpers.createClass(ListGraphLayout, [{\n      key: 'nodesToMatrix',\n      value: function nodesToMatrix(level) {\n        var arr = [];\n\n        var keys = undefined;\n        var start = 0;\n        var end = Object.keys(this.columnCache).length;\n\n        if (isFinite(level)) {\n          start = level;\n          end = level + 1;\n        }\n\n        for (var i = start; i < end; i++) {\n          arr.push({\n            y: 0,\n            x: this.scale.x(i),\n            level: i,\n            rows: [],\n            sortBy: this.columnSorting[i].by,\n            sortOrder: this.columnSorting[i].order\n          });\n          keys = Object.keys(this.columnCache[i]);\n          for (var j = keys.length; j--;) {\n            arr[i - start].rows.push(this.data[keys[j]]);\n          }\n        }\n\n        return arr;\n      }\n\n      /**\n       * Process original data and return an D3 ready Array.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-12-28\n       *\n       * @method  process\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Object}  data  Object list of nodes.\n       * @param  {Array}  rootIds  Array of node IDs to start traversal.\n       * @param  {Object}  options  Object holding extra options such as sorting.\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'process',\n      value: function process(data, rootIds, options) {\n        this.data = data || this.data;\n        this.rootIds = rootIds || this.rootIds;\n\n        if (!isArray(this.rootIds)) {\n          if (isFinite(this.rootIds)) {\n            this.rootIds = [this.rootIds];\n          } else {\n            throw new NoRootNodes('No root node IDs specified.');\n          }\n        }\n\n        traverseGraph(this.data, this.rootIds, this.columnCache, this.columnNodeOrder, this.links, this.scale.x, this.scale.y);\n\n        for (var i = Object.keys(this.columnCache).length; i--;) {\n          this.columnSorting[i] = {};\n        }\n\n        if (options && options.sortBy) {\n          this.sort(undefined, options.sortBy, options.sortOrder || 'desc');\n        }\n\n        return {\n          global: this.compileGlobalProps(),\n          nodes: this.nodesToMatrix()\n        };\n      }\n\n      /**\n       * Sorts nodes of all or a specific level according to a property and order.\n       *\n       * @description\n       * Currently nodes can only be sorted by _precision_, _recall_ or by name.\n       *\n       * @method  sort\n       * @author  Fritz Lekschas\n       * @date    2015-12-04\n       * @param  {Integer}  level  Specifies the level which should be sorted.\n       * @param  {String}  property   The property used for sorting. Can be one of\n       *   ['precision', 'recall', 'name'].\n       * @param  {Integer}  sortOrder  If `1` sort asc. If `-1` sort desc.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'sort',\n      value: function sort(level, property, sortOrder) {\n        var itr = 0;\n        var end = Object.keys(this.columnCache).length;\n        var getValue = undefined;\n        var sortProperty = undefined;\n\n        // 1 = asc, -1 = desc [default]\n        var numericSortOrder = sortOrder === 1 ? 1 : -1;\n\n        switch (property) {\n          case 'precision':\n            sortProperty = 'precision';\n            getValue = function (obj) {\n              return obj.data.barRefs.precision;\n            };\n            break;\n          case 'recall':\n            sortProperty = 'recall';\n            getValue = function (obj) {\n              return obj.data.barRefs.recall;\n            };\n            break;\n          default:\n            getValue = function (obj) {\n              return obj.data.name.toLowerCase();\n            };\n            sortProperty = 'name';\n            break;\n        }\n\n        if (isFinite(level)) {\n          itr = level;\n          end = level + 1;\n        }\n\n        for (itr; itr < end; itr++) {\n          this.columnNodeOrder[itr].sort(function (a, b) {\n            // eslint-disable-line no-loop-func\n            var valueA = getValue(a);\n            var valueB = getValue(b);\n\n            if (valueA > valueB) {\n              return numericSortOrder;\n            }\n            if (valueA < valueB) {\n              return -numericSortOrder;\n            }\n            return 0;\n          });\n\n          this.columnSorting[itr].by = sortProperty;\n          this.columnSorting[itr].order = numericSortOrder;\n\n          // Update `y` according to the new position.\n          for (var i = this.columnNodeOrder[itr].length; i--;) {\n            this.columnNodeOrder[itr][i].y = this.scale.y(i);\n          }\n        }\n\n        return this;\n      }\n\n      /**\n       * Compiles an object of global properties of the visualization.\n       *\n       * @description\n       * Global properties comprise all properties that can be applied to globally\n       * across the visualization such as the width and padding of columns or the\n       * height and padding of rows.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-17\n       *\n       * @method  compileGlobalProps\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @return  {Object}  Object with global properties.\n       */\n\n    }, {\n      key: 'compileGlobalProps',\n      value: function compileGlobalProps() {\n        return {\n          column: {\n            width: this._columnWidth,\n            height: this._size.height,\n            padding: this._colAbsPadding,\n            contentWidth: this._colAbsContentWidth\n          },\n          row: {\n            height: this._rowHeight,\n            padding: this._rowAbsPadding,\n            contentHeight: this._rowAbsContentHeight\n          },\n          cell: {\n            padding: this._cellAbsInnerPadding\n          }\n        };\n      }\n\n      /**\n       * Returns the processed nodes as an Array of Array of nodes.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-16\n       *\n       * @method  nodes\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Integer}  Level for which nodes should be returned.\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'nodes',\n      value: function nodes(level) {\n        return this.nodesToMatrix(level);\n      }\n\n      /**\n       * Returns an array of outgoing links per level, i.e. column, or all outgoing\n       * links.\n       *\n       * @description\n       * The column ID and level might be the same for small graphs but it's\n       * possible that the first column does not represent the first level.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-12-04\n       *\n       * @method  links\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Integer}  startLevel  Start level for returning links. If `to` is\n       *   not specified that only links from `start` level are returned.\n       * @param  {Integer}  endLevel  End level for returning links. So all links\n       *   from `start` to `to` (including) will be returned\n       * @return  {Array}  Array of objects containing the information for outgoing\n       *   links.\n       */\n\n    }, {\n      key: 'links',\n      value: function links(startLevel, endLevel) {\n        var allLinks = [];\n\n        var keys = [];\n        var nodeLinks = undefined;\n        var normStartLevel = undefined;\n        var normEndLevel = undefined;\n\n        if (!isFinite(startLevel)) {\n          keys = Object.keys(this.data);\n        } else {\n          normStartLevel = Math.max(startLevel, 0);\n          normEndLevel = isFinite(endLevel) ? Math.min(endLevel, Object.keys(this.columnCache).length) : normStartLevel + 1;\n\n          for (var i = normStartLevel; i < normEndLevel; i++) {\n            keys = keys.concat(Object.keys(this.columnCache[i]));\n          }\n        }\n\n        for (var i = keys.length; i--;) {\n          nodeLinks = this.data[keys[i]].links;\n          for (var j = nodeLinks.length; j--;) {\n            allLinks.push(nodeLinks[j]);\n          }\n        }\n\n        return allLinks;\n      }\n\n      /**\n       * Offset one end of all links per level vertically.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-18\n       *\n       * @method  offsetLinks\n       * @memberOf  ListGraph\n       * @public\n       * @category  Links\n       * @param  {Integer}  level  If given get's only links of a certain level. The\n       *   level of a node is relative to the length of the shortest path to the\n       *   root node.\n       * @param  {Number}  offsetY  The amount that one end of the link should be\n       *   offset vertically.\n       * @param  {String}  nodeType  Defines which end of the link should be\n       *   shifted. This can either be `source` or `traget`.\n       * @return  {Array}  Array of objects containing the information of the\n       *   modified outgoing links.\n       */\n\n    }, {\n      key: 'offsetLinks',\n      value: function offsetLinks(level, offsetY, nodeType) {\n        var links = this.links(level);\n\n        if ((nodeType === 'source' || nodeType === 'target') && isFinite(offsetY)) {\n          for (var i = links.length; i--;) {\n            links[i][nodeType].offsetY = offsetY;\n          }\n        }\n\n        return links;\n      }\n\n      /**\n       * Set or get the grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-10\n       *\n       * @method  grid\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @category  Data\n       * @param  {Array|Object}  newGrid  New grid configuration. Can either be an\n       *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'grid',\n      value: function grid(newGrid) {\n        if (!arguments.length) {\n          return this._grid;\n        }\n\n        if (isArray(newGrid)) {\n          this._grid.columns = parseInt(newGrid[0], 10) || this._grid.columns;\n          this._grid.rows = parseInt(newGrid[1], 10) || this._grid.rows;\n          this.updateScaling();\n        }\n\n        if (isObject(newGrid)) {\n          this._grid.columns = parseInt(newGrid.columns, 10) || this._grid.columns;\n          this._grid.rows = parseInt(newGrid.rows, 10) || this._grid.rows;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n    }, {\n      key: 'updateBars',\n      value: function updateBars(graph) {\n        var nodesId = Object.keys(graph);\n        var barsData = [];\n\n        for (var i = nodesId.length; i--;) {\n          for (var j = graph[nodesId[i]].data.bars.length; j--;) {\n            barsData.push({\n              barId: nodesId[i] + '.' + graph[nodesId[i]].data.bars[j].id,\n              id: graph[nodesId[i]].data.bars[j].id,\n              value: graph[nodesId[i]].data.bars[j].value\n            });\n          }\n        }\n\n        return barsData;\n      }\n\n      /**\n       * Update vertical position when filtering, i.e. hiding, nodes.\n       *\n       * @method  updateNodeVisibility\n       * @author  Fritz Lekschas\n       * @date    2016-01-17\n       */\n\n    }, {\n      key: 'updateNodesVisibility',\n      value: function updateNodesVisibility() {\n        var skipped = {};\n\n        for (var i = Object.keys(this.columnCache).length; i--;) {\n          skipped[i] = 0;\n          // Update `y` according to the number of previously skipped nodes.\n          for (var j = 0, len = this.columnNodeOrder[i].length; j < len; j++) {\n            if (this.columnNodeOrder[i][j].hidden) {\n              skipped[i]++;\n            }\n            this.columnNodeOrder[i][j].y = this.scale.y(j - skipped[i]);\n          }\n        }\n\n        return this;\n      }\n\n      /**\n       * Updates scaling according to the size and grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  updateScaling\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'updateScaling',\n      value: function updateScaling() {\n        this.scale.x.domain([0, this._grid.columns]).range([0, this._size.width]);\n        this.scale.y.domain([0, this._grid.rows]).range([0, this._size.height]);\n\n        this._columnWidth = this._size.width / this._grid.columns;\n        this._rowHeight = this._size.height / this._grid.rows;\n\n        this._colAbsPadding = this._columnWidth * this._colRelPadding;\n        this._colAbsContentWidth = this._columnWidth * (1 - 2 * this._colRelPadding);\n\n        this._rowAbsPadding = Math.max(this._rowHeight * this._rowRelPadding, 2);\n        this._rowAbsContentHeight = this._rowHeight - 2 * this._rowAbsPadding;\n\n        this._cellAbsInnerPadding = this._cellRelInnerPadding * Math.min(this._colAbsContentWidth, this._rowAbsContentHeight, 1);\n\n        return this;\n      }\n\n      /**\n       * Set or get the size of the layout.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  size\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Array|Object}  newSize  New size. Can either be an Array, e.g.\n       *   `[200, 20]` or an Object, e.g. `{width: 200, height: 20}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'size',\n      value: function size(newSize) {\n        if (!arguments.length) {\n          return this._size;\n        }\n\n        if (isArray(newSize)) {\n          this._size.width = parseInt(newSize[0], 10) || this._size.width;\n          this._size.height = parseInt(newSize[1], 10) || this._size.height;\n          this.updateScaling();\n        }\n\n        if (isObject(newSize)) {\n          this._size.width = parseInt(newSize.width, 10) || this._size.width;\n          this._size.height = parseInt(newSize.height, 10) || this._size.height;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  columnPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0.1, 0.66].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of columns will be returned.\n       */\n\n    }, {\n      key: 'columnPadding',\n      value: function columnPadding(padding, absolute) {\n        if (!arguments.length) {\n          return this._colRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          var relPadding = padding;\n          if (absolute && isFinite(this._columnWidth)) {\n            relPadding = padding / this._columnWidth;\n          }\n          this._colRelPadding = Math.max(Math.min(relPadding, 0.66), 0.1);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  rowPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0, 0.5].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of rows will be returned.\n       */\n\n    }, {\n      key: 'rowPadding',\n      value: function rowPadding(padding, absolute) {\n        if (!arguments.length) {\n          return this._rowRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          var relPadding = padding;\n          if (absolute && isFinite(this._rowHeight)) {\n            relPadding = padding / this._rowHeight;\n          }\n          this._rowRelPadding = Math.max(Math.min(relPadding, 0.5), 0);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n    }]);\n    return ListGraphLayout;\n  })();\n\n  d3.layout.listGraph = ListGraphLayout;\n\n})(d3);"],"sourceRoot":"/source/"}