{"version":3,"sources":["d3.layout.listGraph.min.js"],"names":["d3","checkGlobal","value","Object","isFinite","nativeIsFinite","isObject","type","traverseGraph","graph","starts","columnCache","nodeOrder","links","scaleX","scaleY","processBars","node","data","bars","isArray","barRefs","i","len","length","Math","max","min","barId","id","keys","push","processLink","source","target","offsetX","offsetY","processNode","parent","duplication","_id","toString","_node","skip","clones","depth","cloneId","children","clone","cloneNum","originalId","originalNode","parents","undefined","childRefs","x","y","addSiblings","j","siblings","visited","queue","child","childId","shift","babelHelpers","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","possibleConstructorReturn","self","call","ReferenceError","Array","objectTypes","function","object","freeExports","exports","nodeType","freeModule","module","freeGlobal","global","freeSelf","freeWindow","window","thisGlobal","this","root","Function","ExtendableError","_Error","message","_this","getPrototypeOf","name","Error","captureStackTrace","NoRootNodes","_ExtendableError","SIZE","width","height","GRID","columns","rows","COL_REL_PADDING","ROW_REL_PADDING","CELL_REL_INNER_PADDING","ListGraphLayout","size","grid","scale","linear","_colRelPadding","_rowRelPadding","_cellRelInnerPadding","_grid","_size","columnNodeOrder","columnSorting","level","arr","start","end","sortBy","by","sortOrder","order","rootIds","options","sort","compileGlobalProps","nodes","nodesToMatrix","property","itr","getValue","sortProperty","numericSortOrder","obj","precision","recall","toLowerCase","a","b","valueA","valueB","column","_columnWidth","padding","_colAbsPadding","contentWidth","_colAbsContentWidth","row","_rowHeight","_rowAbsPadding","contentHeight","_rowAbsContentHeight","cell","_cellAbsInnerPadding","startLevel","endLevel","allLinks","nodeLinks","normStartLevel","normEndLevel","concat","newGrid","parseInt","updateScaling","nodesId","barsData","skipped","hidden","queryMode","domain","range","newSize","absolute","relPadding","layout","listGraph"],"mappings":"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","file":"d3.layout.listGraph.min.js","sourcesContent":["/* Copyright Fritz Lekschas: D3 layout for list-based graphs */\n(function (d3) {\n  'use strict';\n\n  var babelHelpers = {};\n\n  babelHelpers.classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  babelHelpers.createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  babelHelpers.inherits = function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  babelHelpers.possibleConstructorReturn = function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n\n  babelHelpers;\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @type {Function}\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray;\n\n  /**\n   * Checks if `value` is a global object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n   */\n  function checkGlobal(value) {\n    return (value && value.Object === Object) ? value : null;\n  }\n\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Detect free variable `exports`. */\n  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n    ? exports\n    : undefined;\n\n  /** Detect free variable `module`. */\n  var freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n    ? module\n    : undefined;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n\n  /** Detect free variable `self`. */\n  var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n\n  /** Detect free variable `window`. */\n  var freeWindow = checkGlobal(objectTypes[typeof window] && window);\n\n  /** Detect `this` as the global object. */\n  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n\n  /**\n   * Used as a reference to the global object.\n   *\n   * The `this` value is used if it's the global object to avoid Greasemonkey's\n   * restricted `window` object, otherwise the `window` object is used.\n   */\n  var root = freeGlobal ||\n    ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\n      freeSelf || thisGlobal || Function('return this')();\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeIsFinite = root.isFinite;\n\n  /**\n   * Checks if `value` is a finite primitive number.\n   *\n   * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n   * @example\n   *\n   * _.isFinite(3);\n   * // => true\n   *\n   * _.isFinite(Number.MAX_VALUE);\n   * // => true\n   *\n   * _.isFinite(3.14);\n   * // => true\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   */\n  function isFinite(value) {\n    return typeof value == 'number' && nativeIsFinite(value);\n  }\n\n  /**\n   * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  var ExtendableError = function (_Error) {\n    babelHelpers.inherits(ExtendableError, _Error);\n\n    function ExtendableError(message) {\n      babelHelpers.classCallCheck(this, ExtendableError);\n\n      var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(ExtendableError).call(this, message));\n\n      _this.name = _this.constructor.name;\n      _this.message = message;\n      Error.captureStackTrace(_this, _this.constructor.name);\n      return _this;\n    }\n\n    return ExtendableError;\n  }(Error);\n\n  var NoRootNodes = function (_ExtendableError) {\n    babelHelpers.inherits(NoRootNodes, _ExtendableError);\n\n    function NoRootNodes(message) {\n      babelHelpers.classCallCheck(this, NoRootNodes);\n      return babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(NoRootNodes).call(this, message || 'No root node IDs specified.'));\n    }\n\n    return NoRootNodes;\n  }(ExtendableError);\n\n  /**\n   * Traverse graph in a breadth-first search fashion and process nodes along\n   * the traversal.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-13\n   *\n   * @private\n   * @method  traverseGraph\n   * @param  {Object}  graph  Graph to be traversed\n   * @param  {Array}  starts  Array of node IDs for start the traversal.\n   * @param  {Object}  columnCache  Cache storing node IDs per column.\n   * @param  {Object|Function}  scaleX  D3 linear scale function for the\n   *    x-axis, e.g. columns.\n   * @param  {Object|Function}  scaleY  D3 linear scale function for the\n   *    y-axis, e.g. rows.\n   */\n  function traverseGraph(graph, starts, columnCache, nodeOrder, links, scaleX, scaleY) {\n    var visited = {};\n    var queue = [];\n\n    var child = undefined;\n    var childId = undefined;\n    var clone = undefined;\n    var node = undefined;\n    var cloneId = undefined;\n\n    /**\n     * Ensure that the bar values are in [0,1] and that the structure of `bars`\n     * is unified.\n     *\n     * @description\n     * Each node can feature a number of bars representing some value. The layout\n     * can handle two structure, an object-based and an array-based structure.\n     *\n     * Object-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": {\n     *       \"propertyA\": 0.9,\n     *       \"propertyB\": 0.5\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Array-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": [{\n     *         \"id\": \"propertyA\",\n     *         \"value\": 0.9\n     *       }, {\n     *         \"id\": \"propertyB\",\n     *         \"value\": 0.5\n     *       }\n     *     ]\n     *   }\n     * }\n     * ```\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-18\n     *\n     * @method  processBars\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  node  Node to be processed.\n     */\n    function processBars(node) {\n      // eslint-disable-line no-shadow\n      if (node.data.bars) {\n        if (isArray(node.data.bars)) {\n          node.data.barRefs = {};\n          for (var i = 0, len = node.data.bars.length; i < len; i++) {\n            node.data.bars[i].value = Math.max(Math.min(node.data.bars[i].value, 1), 0);\n            node.data.bars[i].barId = node.id + '.' + node.data.bars[i].id;\n            node.data.barRefs[node.data.bars[i].id] = node.data.bars[i].value;\n          }\n        } else if (isObject(node.data.bars)) {\n          var bars = [];\n          var keys = Object.keys(node.data.bars);\n          // Keep the old object reference for quick access, e.g.\n          // `node.data.barRefs.precision`\n          node.data.barRefs = {};\n          for (var i = 0, len = keys.length; i < len; i++) {\n            node.data.barRefs[keys[i]] = Math.max(Math.min(node.data.bars[keys[i]], 1), 0);\n            bars.push({\n              barId: node.id + '.' + keys[i],\n              id: keys[i],\n              value: node.data.barRefs[keys[i]]\n            });\n          }\n          node.data.bars = bars;\n        }\n      }\n    }\n\n    /**\n     * Process outgoing links and add them to the source\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-17\n     *\n     * @method  processLink\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  source  Source node.\n     * @param  {Object}  target  Target node.\n     */\n    function processLink(source, target) {\n      source.links.push({\n        id: '(' + source.id + ')->(' + target.id + ')',\n        source: {\n          node: source,\n          offsetX: 0,\n          offsetY: 0\n        },\n        target: {\n          node: target,\n          offsetX: 0,\n          offsetY: 0\n        }\n      });\n    }\n\n    /**\n     * Process a node, e.g. assign `x` and `y`, clone node etc.\n     *\n     * @description\n     * Nodes are edited in place.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-13\n     *\n     * @method  processNode\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {String}  id  Node ID.\n     * @param  {Object}  node  Node to be processed.\n     * @param  {Object}  parent  Parent node.\n     * @param  {Boolean}  duplication  If `true` node needs to be duplicated or\n     *   cloned.\n     */\n    function processNode(id, node, parent, duplication) {\n      // eslint-disable-line no-shadow\n      var _id = id.toString();\n      var _node = node;\n      var skip = false;\n\n      if (duplication) {\n        // Check if there is already another clone on the same level. If so, skip\n        // creating a new clone. The rationale is to have only one clone per\n        // level.\n        for (var i = node.clones.length; i--;) {\n          if (node.clones[i].depth === parent.depth + 1) {\n            skip = true;\n            _id = node.clones[i].cloneId;\n            _node = node.clones[i];\n            break;\n          }\n        }\n\n        // Clone node only when the parent is **not** just one level before the\n        // clone because then the parent can simple link to the _original node_.\n        if (parent.depth + 1 !== node.depth && !skip) {\n          cloneId = id + '.' + (node.clones.length + 1);\n          graph[cloneId] = {\n            children: [],\n            clone: true,\n            cloneId: cloneId,\n            cloneNum: node.clones.length + 1,\n            // Data will be referenced rather than copied to avoid inconsistencies\n            data: node.data,\n            originalId: id.toString(),\n            // Reference to the original node\n            originalNode: node\n          };\n          _id = cloneId;\n          _node = graph[cloneId];\n          // Add a reference to the original node that points to the clone.\n          node.clones.push(_node);\n          // Remove parent\n          node.parents[parent.id] = undefined;\n          delete node.parents[parent.id];\n        }\n      } else {\n        _node.clones = [];\n      }\n\n      _node.id = _id;\n\n      if (!_node.parents) {\n        _node.parents = {};\n      }\n      if (parent) {\n        _node.parents[parent.id] = parent;\n      } else {\n        _node.parents = {};\n      }\n\n      if (!_node.childRefs) {\n        _node.childRefs = [];\n      }\n\n      if (parent) {\n        _node.depth = parent.depth + 1;\n        parent.childRefs.push(_node);\n      } else {\n        _node.depth = 0;\n      }\n\n      if (!_node.links) {\n        _node.links = [];\n      }\n\n      if (!columnCache[_node.depth]) {\n        columnCache[_node.depth] = {};\n        nodeOrder[_node.depth] = [];\n      }\n\n      if (!columnCache[_node.depth][_id]) {\n        columnCache[_node.depth][_id] = true;\n        nodeOrder[_node.depth].push(_node);\n        _node.x = scaleX(_node.depth);\n        _node.y = scaleY(Object.keys(columnCache[_node.depth]).length - 1);\n      }\n\n      processBars(_node);\n\n      if (parent) {\n        processLink(parent, _node);\n      }\n    }\n\n    function addSiblings() {\n      for (var i = starts.length; i--;) {\n        for (var j = starts.length; j--;) {\n          if (i !== j) {\n            if (!graph[starts[i]].siblings) {\n              graph[starts[i]].siblings = {};\n            }\n            graph[starts[i]].siblings[starts[j]] = graph[starts[j]];\n          }\n        }\n      }\n    }\n\n    // BFS for each start node.\n    for (var i = starts.length; i--;) {\n      if (!graph[starts[i]]) {\n        return;\n      }\n\n      processNode(starts[i], graph[starts[i]]);\n\n      queue.push(starts[i]);\n      visited[starts[i]] = true;\n\n      while (queue.length > 0) {\n        node = graph[queue.shift()];\n\n        for (var j = node.children.length; j--;) {\n          childId = node.children[j];\n          child = graph[childId];\n\n          if (!!child) {\n            if (!visited[childId]) {\n              queue.push(childId);\n              visited[childId] = true;\n              clone = false;\n            } else {\n              clone = true;\n            }\n\n            processNode(childId, child, node, clone);\n          }\n        }\n      }\n    }\n\n    addSiblings();\n  }\n\n  /**\n   * Default size\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var SIZE = {\n    width: 300,\n    height: 300\n  };\n\n  /**\n   * Default grid\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var GRID = {\n    columns: 3,\n    rows: 3\n  };\n\n  /**\n   * Default relative padding of columns.\n   *\n   * @description\n   * Padding between columns refers to the left and right inner padding used\n   * for links between items in the column. Padding is relative to the overall\n   * width of the column.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var COL_REL_PADDING = 0.2;\n\n  /**\n   * Default relative padding of rows.\n   *\n   * @description\n   * Padding between rows refers to the top and bottom inner padding used to\n   * separate items vertically in the column. Padding is relative to the overall\n   * height of the row.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var ROW_REL_PADDING = 0.05;\n\n  /**\n   * Default inner padding of a cell relative to the shorter dimension, e.g.\n   * width or height.\n   *\n   * @type  {Number}\n   */\n  var CELL_REL_INNER_PADDING = 0.05;\n\n  var ListGraphLayout = function () {\n    /**\n     * ListGraph class constructor.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @constructor\n     * @param  {Array|Object}  size  New size. Can either be an Array, e.g.\n     *   `[200,20]` or an Object, e.g. `{width: 200, height: 20}`.\n     * @param  {Array|Object}  grid  New grid configuration. Can either be an\n     *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n     */\n\n    function ListGraphLayout(size, grid) {\n      babelHelpers.classCallCheck(this, ListGraphLayout);\n\n      this.scale = {\n        x: d3.scale.linear(),\n        y: d3.scale.linear()\n      };\n\n      this._colRelPadding = COL_REL_PADDING;\n      this._rowRelPadding = ROW_REL_PADDING;\n      this._cellRelInnerPadding = CELL_REL_INNER_PADDING;\n\n      this._grid = {\n        columns: GRID.columns,\n        rows: GRID.rows\n      };\n\n      this._size = {\n        width: SIZE.width,\n        height: SIZE.height\n      };\n\n      this.grid(grid);\n      this.size(size);\n\n      this.columnCache = {};\n      this.columns = {};\n      this.columnNodeOrder = {};\n      this.columnSorting = {};\n    }\n\n    /**\n     * Convert an object-based list of nodes into an array of arrays of nodes.\n     *\n     * @description\n     * Representing a graph using hierarchical data structures such as an Array is\n     * difficult. To save resources and avoid complex structures a graph is\n     * represented as a simple list of nodes. The list correspondes to an objects\n     * where the object's keys stand for node identifiers. This ensures uniqueness\n     * but has the disadvantage that D3 doesn't know what to do with it, thus we\n     * have to convert that structure into a fat array of array of nodes. It's\n     * important to notice that the nodes are *not* cloned into the array but\n     * instead simply linked using references.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-12-04\n     *\n     * @method  nodesToMatrix\n     * @memberOf  ListGraph\n     * @public\n     * @param  {Integer}  Level for which nodes should be returned.\n     * @return  {Array}  Fat array of arrays of nodes.\n     */\n\n\n    babelHelpers.createClass(ListGraphLayout, [{\n      key: 'nodesToMatrix',\n      value: function nodesToMatrix(level) {\n        var arr = [];\n\n        var keys = undefined;\n        var start = 0;\n        var end = Object.keys(this.columnCache).length;\n\n        if (isFinite(level)) {\n          start = level;\n          end = level + 1;\n        }\n\n        for (var i = start; i < end; i++) {\n          arr.push({\n            y: 0,\n            x: this.scale.x(i),\n            level: i,\n            rows: [],\n            sortBy: this.columnSorting[i].by,\n            sortOrder: this.columnSorting[i].order\n          });\n          keys = Object.keys(this.columnCache[i]);\n          for (var j = keys.length; j--;) {\n            arr[i - start].rows.push(this.data[keys[j]]);\n          }\n        }\n\n        return arr;\n      }\n\n      /**\n       * Process original data and return an D3 ready Array.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-12-28\n       *\n       * @method  process\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Object}  data  Object list of nodes.\n       * @param  {Array}  rootIds  Array of node IDs to start traversal.\n       * @param  {Object}  options  Object holding extra options such as sorting.\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'process',\n      value: function process(data, rootIds, options) {\n        this.data = data || this.data;\n        this.rootIds = rootIds || this.rootIds;\n\n        if (!isArray(this.rootIds)) {\n          if (isFinite(this.rootIds)) {\n            this.rootIds = [this.rootIds];\n          } else {\n            throw new NoRootNodes('No root node IDs specified.');\n          }\n        }\n\n        traverseGraph(this.data, this.rootIds, this.columnCache, this.columnNodeOrder, this.links, this.scale.x, this.scale.y);\n\n        for (var i = Object.keys(this.columnCache).length; i--;) {\n          this.columnSorting[i] = {};\n        }\n\n        if (options && options.sortBy) {\n          this.sort(undefined, options.sortBy, options.sortOrder || 'desc');\n        }\n\n        return {\n          global: this.compileGlobalProps(),\n          nodes: this.nodesToMatrix()\n        };\n      }\n\n      /**\n       * Sorts nodes of all or a specific level according to a property and order.\n       *\n       * @description\n       * Currently nodes can only be sorted by _precision_, _recall_ or by name.\n       *\n       * @method  sort\n       * @author  Fritz Lekschas\n       * @date    2015-12-04\n       * @param  {Integer}  level  Specifies the level which should be sorted.\n       * @param  {String}  property   The property used for sorting. Can be one of\n       *   ['precision', 'recall', 'name'].\n       * @param  {Integer}  sortOrder  If `1` sort asc. If `-1` sort desc.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'sort',\n      value: function sort(level, property, sortOrder) {\n        var itr = 0;\n        var end = Object.keys(this.columnCache).length;\n        var getValue = undefined;\n        var sortProperty = undefined;\n\n        // 1 = asc, -1 = desc [default]\n        var numericSortOrder = sortOrder === 1 ? 1 : -1;\n\n        switch (property) {\n          case 'precision':\n            sortProperty = 'precision';\n            getValue = function getValue(obj) {\n              return obj.data.barRefs.precision;\n            };\n            break;\n          case 'recall':\n            sortProperty = 'recall';\n            getValue = function getValue(obj) {\n              return obj.data.barRefs.recall;\n            };\n            break;\n          default:\n            getValue = function getValue(obj) {\n              return obj.data.name.toLowerCase();\n            };\n            sortProperty = 'name';\n            break;\n        }\n\n        if (isFinite(level)) {\n          itr = level;\n          end = level + 1;\n        }\n\n        for (itr; itr < end; itr++) {\n          this.columnNodeOrder[itr].sort(function (a, b) {\n            // eslint-disable-line no-loop-func\n            var valueA = getValue(a);\n            var valueB = getValue(b);\n\n            if (valueA > valueB) {\n              return numericSortOrder;\n            }\n            if (valueA < valueB) {\n              return -numericSortOrder;\n            }\n            return 0;\n          });\n\n          this.columnSorting[itr].by = sortProperty;\n          this.columnSorting[itr].order = numericSortOrder;\n\n          // Update `y` according to the new position.\n          for (var i = this.columnNodeOrder[itr].length; i--;) {\n            this.columnNodeOrder[itr][i].y = this.scale.y(i);\n          }\n        }\n\n        return this;\n      }\n\n      /**\n       * Compiles an object of global properties of the visualization.\n       *\n       * @description\n       * Global properties comprise all properties that can be applied to globally\n       * across the visualization such as the width and padding of columns or the\n       * height and padding of rows.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-17\n       *\n       * @method  compileGlobalProps\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @return  {Object}  Object with global properties.\n       */\n\n    }, {\n      key: 'compileGlobalProps',\n      value: function compileGlobalProps() {\n        return {\n          column: {\n            width: this._columnWidth,\n            height: this._size.height,\n            padding: this._colAbsPadding,\n            contentWidth: this._colAbsContentWidth\n          },\n          row: {\n            height: this._rowHeight,\n            padding: this._rowAbsPadding,\n            contentHeight: this._rowAbsContentHeight\n          },\n          cell: {\n            padding: this._cellAbsInnerPadding\n          }\n        };\n      }\n\n      /**\n       * Returns the processed nodes as an Array of Array of nodes.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-16\n       *\n       * @method  nodes\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Integer}  Level for which nodes should be returned.\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'nodes',\n      value: function nodes(level) {\n        return this.nodesToMatrix(level);\n      }\n\n      /**\n       * Returns an array of outgoing links per level, i.e. column, or all outgoing\n       * links.\n       *\n       * @description\n       * The column ID and level might be the same for small graphs but it's\n       * possible that the first column does not represent the first level.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-12-04\n       *\n       * @method  links\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Integer}  startLevel  Start level for returning links. If `to` is\n       *   not specified that only links from `start` level are returned.\n       * @param  {Integer}  endLevel  End level for returning links. So all links\n       *   from `start` to `to` (including) will be returned\n       * @return  {Array}  Array of objects containing the information for outgoing\n       *   links.\n       */\n\n    }, {\n      key: 'links',\n      value: function links(startLevel, endLevel) {\n        var allLinks = [];\n\n        var keys = [];\n        var nodeLinks = undefined;\n        var normStartLevel = undefined;\n        var normEndLevel = undefined;\n\n        if (!isFinite(startLevel)) {\n          keys = Object.keys(this.data);\n        } else {\n          normStartLevel = Math.max(startLevel, 0);\n          normEndLevel = isFinite(endLevel) ? Math.min(endLevel, Object.keys(this.columnCache).length) : normStartLevel + 1;\n\n          for (var i = normStartLevel; i < normEndLevel; i++) {\n            keys = keys.concat(Object.keys(this.columnCache[i]));\n          }\n        }\n\n        for (var i = keys.length; i--;) {\n          nodeLinks = this.data[keys[i]].links;\n          for (var j = nodeLinks.length; j--;) {\n            allLinks.push(nodeLinks[j]);\n          }\n        }\n\n        return allLinks;\n      }\n\n      /**\n       * Offset one end of all links per level vertically.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-18\n       *\n       * @method  offsetLinks\n       * @memberOf  ListGraph\n       * @public\n       * @category  Links\n       * @param  {Integer}  level  If given get's only links of a certain level. The\n       *   level of a node is relative to the length of the shortest path to the\n       *   root node.\n       * @param  {Number}  offsetY  The amount that one end of the link should be\n       *   offset vertically.\n       * @param  {String}  nodeType  Defines which end of the link should be\n       *   shifted. This can either be `source` or `traget`.\n       * @return  {Array}  Array of objects containing the information of the\n       *   modified outgoing links.\n       */\n\n    }, {\n      key: 'offsetLinks',\n      value: function offsetLinks(level, offsetY, nodeType) {\n        var links = this.links(level);\n\n        if ((nodeType === 'source' || nodeType === 'target') && isFinite(offsetY)) {\n          for (var i = links.length; i--;) {\n            links[i][nodeType].offsetY = offsetY;\n          }\n        }\n\n        return links;\n      }\n\n      /**\n       * Set or get the grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-10\n       *\n       * @method  grid\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @category  Data\n       * @param  {Array|Object}  newGrid  New grid configuration. Can either be an\n       *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'grid',\n      value: function grid(newGrid) {\n        if (!newGrid) {\n          return this._grid;\n        }\n\n        if (isArray(newGrid)) {\n          this._grid.columns = parseInt(newGrid[0], 10) || this._grid.columns;\n          this._grid.rows = parseInt(newGrid[1], 10) || this._grid.rows;\n          this.updateScaling();\n        }\n\n        if (isObject(newGrid)) {\n          this._grid.columns = parseInt(newGrid.columns, 10) || this._grid.columns;\n          this._grid.rows = parseInt(newGrid.rows, 10) || this._grid.rows;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n    }, {\n      key: 'updateBars',\n      value: function updateBars(graph) {\n        var nodesId = Object.keys(graph);\n        var barsData = [];\n\n        for (var i = nodesId.length; i--;) {\n          for (var j = graph[nodesId[i]].data.bars.length; j--;) {\n            barsData.push({\n              barId: nodesId[i] + '.' + graph[nodesId[i]].data.bars[j].id,\n              id: graph[nodesId[i]].data.bars[j].id,\n              value: graph[nodesId[i]].data.bars[j].value\n            });\n          }\n        }\n\n        return barsData;\n      }\n\n      /**\n       * Update vertical position when filtering, i.e. hiding, nodes.\n       *\n       * @method  updateNodeVisibility\n       * @author  Fritz Lekschas\n       * @date    2016-01-17\n       */\n\n    }, {\n      key: 'updateNodesVisibility',\n      value: function updateNodesVisibility() {\n        var skipped = {};\n\n        for (var i = Object.keys(this.columnCache).length; i--;) {\n          skipped[i] = 0;\n          // Update `y` according to the number of previously skipped nodes.\n          for (var j = 0, len = this.columnNodeOrder[i].length; j < len; j++) {\n            if (this.columnNodeOrder[i][j].hidden && !this.columnNodeOrder[i][j].data.queryMode) {\n              skipped[i]++;\n            }\n            this.columnNodeOrder[i][j].y = this.scale.y(j - skipped[i]);\n          }\n        }\n\n        return this;\n      }\n\n      /**\n       * Updates scaling according to the size and grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  updateScaling\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'updateScaling',\n      value: function updateScaling() {\n        this.scale.x.domain([0, this._grid.columns]).range([0, this._size.width]);\n        this.scale.y.domain([0, this._grid.rows]).range([0, this._size.height]);\n\n        this._columnWidth = this._size.width / this._grid.columns;\n        this._rowHeight = this._size.height / this._grid.rows;\n\n        this._colAbsPadding = this._columnWidth * this._colRelPadding;\n        this._colAbsContentWidth = this._columnWidth * (1 - 2 * this._colRelPadding);\n\n        this._rowAbsPadding = Math.max(this._rowHeight * this._rowRelPadding, 2);\n        this._rowAbsContentHeight = this._rowHeight - 2 * this._rowAbsPadding;\n\n        this._cellAbsInnerPadding = this._cellRelInnerPadding * Math.min(this._colAbsContentWidth, this._rowAbsContentHeight, 1);\n\n        return this;\n      }\n\n      /**\n       * Set or get the size of the layout.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  size\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Array|Object}  newSize  New size. Can either be an Array, e.g.\n       *   `[200, 20]` or an Object, e.g. `{width: 200, height: 20}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'size',\n      value: function size(newSize) {\n        if (!newSize) {\n          return this._size;\n        }\n\n        if (isArray(newSize)) {\n          this._size.width = parseInt(newSize[0], 10) || this._size.width;\n          this._size.height = parseInt(newSize[1], 10) || this._size.height;\n          this.updateScaling();\n        }\n\n        if (isObject(newSize)) {\n          this._size.width = parseInt(newSize.width, 10) || this._size.width;\n          this._size.height = parseInt(newSize.height, 10) || this._size.height;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  columnPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0.1, 0.66].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of columns will be returned.\n       */\n\n    }, {\n      key: 'columnPadding',\n      value: function columnPadding(padding, absolute) {\n        if (!padding) {\n          return this._colRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          var relPadding = padding;\n          if (absolute && isFinite(this._columnWidth)) {\n            relPadding = padding / this._columnWidth;\n          }\n          this._colRelPadding = Math.max(Math.min(relPadding, 0.66), 0.1);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  rowPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0, 0.5].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of rows will be returned.\n       */\n\n    }, {\n      key: 'rowPadding',\n      value: function rowPadding(padding, absolute) {\n        if (!padding) {\n          return this._rowRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          var relPadding = padding;\n          if (absolute && isFinite(this._rowHeight)) {\n            relPadding = padding / this._rowHeight;\n          }\n          this._rowRelPadding = Math.max(Math.min(relPadding, 0.5), 0);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n    }]);\n    return ListGraphLayout;\n  }();\n\n  d3.layout.listGraph = ListGraphLayout;\n\n}(d3));"],"sourceRoot":"/source/"}