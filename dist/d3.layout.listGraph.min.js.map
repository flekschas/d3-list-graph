{"version":3,"sources":["d3.layout.listGraph.min.js"],"names":["d3","layout","listGraph","isArray","value","Array","isFiniteNumber","window","isFinite","isObject","type","traverseGraph","graph","starts","columnCache","links","scaleX","scaleY","processBars","node","data","bars","i","length","Math","max","min","keys","Object","push","id","processNode","parent","duplication","_id","_node","cloneId","clones","children","clone","originalId","originalNode","childRefs","depth","x","y","processLink","source","target","offsetX","offsetY","j","child","childId","visited","queue","start","shift","ListGraph","size","grid","this","scale","linear","_colRelPadding","_rowRelPadding","_cellRelInnerPadding","_grid","columns","rows","_size","width","height","prototype","nodesToMatrix","arr","numLevels","level","process","rootIds","global","compileGlobalProps","nodes","column","_columnWidth","padding","_colAbsPadding","contentWidth","_colAbsContentWidth","row","_rowHeight","_rowAbsPadding","contentHeight","_rowAbsContentHeight","cell","_cellAbsInnerPadding","allLinks","offsetLinks","nodeType","newGrid","arguments","parseInt","updateScaling","domain","range","newSize","columnPadding","absolute","rowPadding"],"mappings":"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","file":"d3.layout.listGraph.min.js","sourcesContent":["d3.layout.listGraph = function() {\n  /**\n   * Default size\n   *\n   * @private\n   * @type  {Object}\n   */\n  var _size = {\n    width: 300,\n    height: 300\n  };\n\n  /**\n   * Default grid\n   *\n   * @private\n   * @type  {Object}\n   */\n  var _grid = {\n    columns: 3,\n    rows: 3\n  };\n\n  /**\n   * Default relative padding of columns.\n   *\n   * @description\n   * Padding between columns refers to the left and right inner padding used\n   * for links between items in the column. Padding is relative to the overall\n   * width of the column.\n   *\n   * @private\n   * @type  {Number}\n   */\n  var _colRelPadding = 0.2;\n\n  /**\n   * Default relative padding of rows.\n   *\n   * @description\n   * Padding between rows refers to the top and bottom inner padding used to\n   * separate items vertically in the column. Padding is relative to the overall\n   * height of the row.\n   *\n   * @private\n   * @type  {Number}\n   */\n  var _rowRelPadding = 0.05;\n\n  /**\n   * Default inner padding of a cell relative to the shorter dimension, e.g.\n   * width or height.\n   *\n   * @type  {Number}\n   */\n  var _cellRelInnerPadding = 0.05;\n\n  /**\n   * Tests if value is an array.\n   *\n   * @copyright  Lodash\n   * @see  https://lodash.com/docs#isArray\n   *\n   * @method  isArray\n   * @private\n   * @param  {*}  value  Value to be tested.\n   * @return  {Boolean}  If `true` the value is an Array.\n   */\n  function isArray (value) {\n    return Array.isArray(value);\n  }\n\n  /**\n   * Tests if value is a finite primitive number.\n   *\n   * @copyright  Lodash\n   * @see  https://lodash.com/docs#isFinite\n   *\n   * @date  2015-11-17\n   *\n   * @method  isNumber\n   * @private\n   * @param  {*}  value  Value to be tested.\n   * @return  {Boolean}  If `true` the value is a Number.\n   */\n  function isFiniteNumber (value) {\n    return typeof value == 'number' && window.isFinite(value);\n  }\n\n  /**\n   * Tests if value is an object.\n   *\n   * @copyright  Lodash\n   * @see  https://lodash.com/docs#isObject\n   *\n   * @method  isObject\n   * @private\n   * @param  {*}  value  Value to be tested.\n   * @return  {Boolean}  If `true` the value is an Object.\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Tests if value is a string.\n   *\n   * @copyright  Lodash\n   * @see  https://lodash.com/docs#isString\n   *\n   * @method  isString\n   * @private\n   * @param  {*}  value  Value to be tested.\n   * @return  {Boolean}  If `true` the value is a String.\n   */\n  function isString (value) {\n    return typeof value == 'string' ||\n      (isObjectLike(value) && objToString.call(value) == stringTag);\n  }\n\n  /**\n   * Traverse graph in a breadth-first search fashion and process nodes along\n   * the traversal.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-13\n   *\n   * @private\n   * @method  traverseGraph\n   * @param  {Object}  graph  Graph to be traversed\n   * @param  {Array}  starts  Array of node IDs for start the traversal.\n   * @param  {Object}  columnCache  Cache storing node IDs per column.\n   * @param  {Object|Function}  scaleX  D3 linear scale function for the\n   *    x-axis, e.g. columns.\n   * @param  {Object|Function}  scaleY  D3 linear scale function for the\n   *    y-axis, e.g. rows.\n   */\n  function traverseGraph (graph, starts, columnCache, links, scaleX, scaleY) {\n    var j;\n    var child;\n    var childId;\n    var clone;\n    var node;\n    var visited = {};\n    var queue = [];\n    var cloneId;\n\n    /**\n     * Ensure that the bar values are in [0,1] and that the structure of `bars`\n     * is unified.\n     *\n     * @description\n     * Each node can feature a number of bars representing something. The layout\n     * can handle two structure, an object-based and an array-based structure.\n     *\n     * Object-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": {\n     *       \"propertyA\": 0.9,\n     *       \"propertyB\": 0.5\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Array-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": [{\n     *         \"id\": \"propertyA\",\n     *         \"value\": 0.9\n     *       }, {\n     *         \"id\": \"propertyB\",\n     *         \"value\": 0.5\n     *       }\n     *     ]\n     *   }\n     * }\n     * ```\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-18\n     *\n     * @method  processBars\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  node  Node to be processed.\n     */\n    function processBars (node) {\n      if (node.data.bars) {\n        if (isArray(node.data.bars)) {\n          for (var i = node.data.bars.length; i--;) {\n            node.data.bars[i].value = Math.max(\n              Math.min(node.data.bars[i].value, 1),\n              0\n            );\n          }\n        } else if (isObject(node.data.bars)) {\n          var bars = [];\n          var keys = Object.keys(node.data.bars);\n          for (var i = keys.length; i--;) {\n            node.data.bars[keys[i]] = Math.max(\n              Math.min(node.data.bars[keys[i]], 1),\n              0\n            );\n            bars.push({\n              id: keys[i],\n              value: node.data.bars[keys[i]]\n            });\n          }\n          node.data.bars = bars;\n        }\n      }\n    }\n\n    /**\n     * Process a node, e.g. assign `x` and `y`, clone node etc.\n     *\n     * @description\n     * Nodes are edited in place.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-13\n     *\n     * @method  processNode\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {String}  id  Node ID.\n     * @param  {Object}  node  Node to be processed.\n     * @param  {Object}  parent  Parent node.\n     * @param  {Boolean}  duplication  If `true` node is a duplication.\n     */\n    function processNode (id, node, parent, duplication) {\n      var _id = id;\n      var _node = node;\n\n      if (duplication) {\n        cloneId = id + '.' + node.clones.length + 1;\n        graph[cloneId] = {\n          children: [],\n          clone: true,\n          cloneId: node.clones.length + 1,\n          // Data will be referenced rather than copied to avoid inconsistencies\n          data: node.data,\n          originalId: id,\n          // Reference to the original node\n          originalNode: node,\n        };\n        _id = cloneId;\n        _node = graph[cloneId];\n        // Add a reference to the original node that points to the clone.\n        node.clones.push(_node);\n      } else {\n        _node['clones'] = [];\n      }\n\n      _node.parent = parent;\n\n      if (!_node.childRefs) {\n        _node.childRefs = [];\n      }\n\n      if (parent) {\n        _node.depth = parent.depth + 1;\n        parent.childRefs.push(_node);\n      } else {\n        _node.depth = 0;\n      }\n\n      if (!_node.links) {\n        _node.links = [];\n      }\n\n      if (!columnCache[_node.depth]) {\n        columnCache[_node.depth] = {};\n      }\n\n      if (!columnCache[_node.depth][_id]) {\n        columnCache[_node.depth][_id] = true;\n        _node.x = scaleX(_node.depth);\n        _node.y = scaleY(Object.keys(columnCache[_node.depth]).length - 1);\n      }\n\n      processBars(_node);\n\n      if (parent) {\n        processLink(parent, _node);\n      }\n    }\n\n    /**\n     * Process outgoing links and add them to the source\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-17\n     *\n     * @method  processLink\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  source  Source node.\n     * @param  {Object}  target  Target node.\n     */\n    function processLink (source, target) {\n      source.links.push({\n        source: {\n          x: source.x,\n          y: source.y,\n          offsetX: 0,\n          offsetY: 0\n        },\n        target: {\n          x: target.x,\n          y: target.y,\n          offsetX: 0,\n          offsetY: 0\n        }\n      });\n    }\n\n    // BFS for each start node.\n    for (var i = starts.length; i--;) {\n      start = starts[i];\n\n      if (!graph[start]) {\n        return;\n      }\n\n      processNode(start, graph[start]);\n\n      queue.push(start);\n      visited[start] = true;\n\n      while (queue.length > 0) {\n        id = queue.shift();\n        node = graph[id];\n\n        for (j = node.children.length; j--;) {\n          childId = node.children[j];\n          child = graph[childId];\n\n          if (!!child) {\n            if (!visited[childId]) {\n              queue.push(childId);\n              visited[childId] = true;\n              clone = false;\n            } else {\n              clone = true;\n            }\n\n            processNode(\n              childId,\n              child,\n              node,\n              clone\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * ListGraph class constructor.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-10\n   *\n   * @class\n   * @method  ListGraph\n   * @param  {Array|Object}  size  New size. Can either be an Array, e.g.\n   *   `[200,20]` or an Object, e.g. `{width: 200, height: 20}`.\n   * @param  {Array|Object}  grid  New grid configuration. Can either be an\n   *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n   */\n  function ListGraph (size, grid) {\n    this.scale = {\n      x: d3.scale.linear(),\n      y: d3.scale.linear()\n    };\n\n    this._colRelPadding = _colRelPadding;\n    this._rowRelPadding = _rowRelPadding;\n    this._cellRelInnerPadding = _cellRelInnerPadding;\n\n    this._grid = {\n      columns: _grid.columns,\n      rows: _grid.rows\n    };\n\n    this._size = {\n      width: _size.width,\n      height: _size.height\n    };\n\n    this.grid(grid);\n    this.size(size);\n\n    this.columnCache = {};\n    this.columns = {};\n\n    return this;\n  }\n\n  /**\n   * Convert an object-based list of nodes into an array of arrays of nodes.\n   *\n   * @description\n   * Representing a graph using hierarchical data structures such as an Array is\n   * difficult. To save resources and avoid complex structures a graph is\n   * represented as a simple list of nodes. The list correspondes to an objects\n   * where the object's keys stand for node identifiers. This ensures uniqueness\n   * but has the disadvantage that D3 doesn't know what to do with it, thus we\n   * have to convert that structure into a fat array of array of nodes. It's\n   * important to notice that the nodes are *not* cloned into the array but\n   * instead simply linked using references.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-10\n   *\n   * @method  nodesToMatrix\n   * @memberOf  ListGraph\n   * @public\n   * @return  {Array}  Fat array of arrays of nodes.\n   */\n  ListGraph.prototype.nodesToMatrix = function () {\n    var arr = [];\n    var keys;\n    var numLevels = Object.keys(this.columnCache).length;\n\n    for (var i = 0; i < numLevels; i++) {\n      arr.push({\n        y: 0,\n        x: this.scale.x(i),\n        level: i,\n        rows: []\n      });\n      keys = Object.keys(this.columnCache[i]);\n      for (var j = keys.length; j--;) {\n        arr[i].rows.push(this.data[keys[j]]);\n      }\n    }\n\n    return arr;\n  };\n\n  /**\n   * Process original data and return an D3 ready Array.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-16\n   *\n   * @method  process\n   * @memberOf  ListGraph\n   * @public\n   * @category  Data\n   * @param  {Object}  data  Object list of nodes.\n   * @param  {Array}  rootIds  Array of node IDs to start traversal.\n   * @return  {Array}  Array of Array of nodes.\n   */\n  ListGraph.prototype.process = function (data, rootIds) {\n    this.data = data || this.data;\n    this.rootIds = rootIds || this.rootIds;\n\n    if (!isArray(this.rootIds)) {\n      this.rootIds = [this.rootIds];\n    }\n\n    traverseGraph(\n      this.data,\n      this.rootIds,\n      this.columnCache,\n      this.links,\n      this.scale.x,\n      this.scale.y\n    );\n\n    return {\n      global: this.compileGlobalProps(),\n      nodes: this.nodesToMatrix()\n    };\n  };\n\n  /**\n   * Compiles an object of global properties of the visualization.\n   *\n   * @description\n   * Global properties comprise all properties that can be applied to globally\n   * across the visualization such as the width and padding of columns or the\n   * height and padding of rows.\n   *\n   * @author  Fritz Lekschas\n   * @date    2015-11-17\n   *\n   * @method  compileGlobalProps\n   * @memberOf  ListGraph\n   * @public\n   * @category  Data\n   * @return  {Object}  Object with global properties.\n   */\n  ListGraph.prototype.compileGlobalProps = function () {\n    return {\n      column: {\n        width: this._columnWidth,\n        height: this._size.height,\n        padding: this._colAbsPadding,\n        contentWidth: this._colAbsContentWidth\n      },\n      row: {\n        height: this._rowHeight,\n        padding: this._rowAbsPadding,\n        contentHeight: this._rowAbsContentHeight\n      },\n      cell: {\n        padding: this._cellAbsInnerPadding\n      }\n    };\n  };\n\n  /**\n   * Returns the processed nodes as an Array of Array of nodes.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-16\n   *\n   * @method  nodes\n   * @memberOf  ListGraph\n   * @public\n   * @category  Data\n   * @return  {Array}  Array of Array of nodes.\n   */\n  ListGraph.prototype.nodes = function () {\n    return this.nodesToMatrix();\n  };\n\n  /**\n   * Returns an array of links per level, i.e. column, or all links.\n   *\n   * @description\n   * The column ID and level might be the same for small graphs but it's\n   * possible that the first column does not represent the root nodes. This is\n   * obviously the case when the user scrolls away.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-17\n   *\n   * @method  links\n   * @memberOf  ListGraph\n   * @public\n   * @category  Data\n   * @param  {Integer}  level  If given get's only links of a certain level. The\n   *   level of a node is relative to the length of the shortest path to the\n   *   root node.\n   * @return  {Array}  Array of objects containing the information for outgoing\n   *   links.\n   */\n  ListGraph.prototype.links = function (level) {\n    var allLinks = [], source, keys, links;\n\n    if (!isFiniteNumber(level)) {\n      source = this.data;\n    } else {\n      source = this.columnCache[level];\n    }\n\n    keys = source ? Object.keys(source) : [];\n\n    for (var i = keys.length; i--;) {\n      links = this.data[keys[i]].links;\n      for (var j = links.length; j--;) {\n        allLinks.push(links[j]);\n      }\n    }\n\n    return allLinks;\n  };\n\n  /**\n   * Offset one end of all links per level vertically.\n   *\n   * @author  Fritz Lekschas\n   * @date    2015-11-18\n   *\n   * @method  offsetLinks\n   * @memberOf  ListGraph\n   * @public\n   * @category  Links\n   * @param  {Integer}  level  If given get's only links of a certain level. The\n   *   level of a node is relative to the length of the shortest path to the\n   *   root node.\n   * @param  {Number}  offsetY  The amount that one end of the link should be\n   *   offset vertically.\n   * @param  {String}  nodeType  Defines which end of the link should be\n   *   shifted. This can either be `source` or `traget`.\n   * @return  {Array}  Array of objects containing the information of the\n   *   modified outgoing links.\n   */\n  ListGraph.prototype.offsetLinks = function (level, offsetY, nodeType) {\n    var links = this.links(level);\n\n    if (\n      (nodeType === 'source' || nodeType === 'target') &&\n      isFiniteNumber(offsetY)\n    ) {\n      for (var i = links.length; i--;) {\n        links[i][nodeType].offsetY = offsetY;\n      }\n    }\n\n    return links;\n  };\n\n  /**\n   * Set or get the grid configuration.\n   *\n   * @author  Fritz Lekschas\n   * @date    2015-11-10\n   *\n   * @method  grid\n   * @memberOf  ListGraph\n   * @public\n   * @chainable\n   * @category  Data\n   * @param  {Array|Object}  newGrid  New grid configuration. Can either be an\n   *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n   * @return  {Object}  Self.\n   */\n  ListGraph.prototype.grid = function (newGrid) {\n    if (!arguments.length) {\n      return this._grid;\n    }\n\n    if (isArray(newGrid)) {\n      this._grid.columns = parseInt(newGrid[0]) || this._grid.columns;\n      this._grid.rows = parseInt(newGrid[1]) || this._grid.rows;\n      this.updateScaling();\n    }\n\n    if (isObject(newGrid)) {\n      this._grid.columns = parseInt(newGrid.columns)|| this._grid.columns;\n      this._grid.rows = parseInt(newGrid.rows)|| this._grid.rows;\n      this.updateScaling();\n    }\n\n    return this;\n  };\n\n  /**\n   * Updates scaling according to the size and grid configuration.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-10\n   *\n   * @method  updateScaling\n   * @memberOf  ListGraph\n   * @public\n   * @chainable\n   * @return  {Object}  Self.\n   */\n  ListGraph.prototype.updateScaling = function () {\n    this.scale.x.domain([0, this._grid.columns]).range([0, this._size.width]);\n    this.scale.y.domain([0, this._grid.rows]).range([0, this._size.height]);\n\n    this._columnWidth = this._size.width / this._grid.columns;\n    this._rowHeight = this._size.height / this._grid.rows;\n\n    this._colAbsPadding = this._columnWidth * this._colRelPadding;\n    this._colAbsContentWidth = this._columnWidth * (\n      1 - 2 * this._colRelPadding\n    );\n\n    this._rowAbsPadding = this._rowHeight * _rowRelPadding;\n    this._rowAbsContentHeight = this._rowHeight * (\n      1 - 2 * this._rowRelPadding\n    );\n\n    this._cellAbsInnerPadding = this._cellRelInnerPadding * Math.min(\n      this._colAbsContentWidth,\n      this._rowAbsContentHeight\n    );\n\n    return this;\n  };\n\n  /**\n   * Set or get the size of the layout.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-10\n   *\n   * @method  size\n   * @memberOf  ListGraph\n   * @public\n   * @chainable\n   * @param  {Array|Object}  newSize  New size. Can either be an Array, e.g.\n   *   `[200, 20]` or an Object, e.g. `{width: 200, height: 20}`.\n   * @return  {Object}  Self.\n   */\n  ListGraph.prototype.size = function (newSize) {\n    if (!arguments.length) {\n      return this._size;\n    }\n\n    if (isArray(newSize)) {\n      this._size.width = parseInt(newSize[0]) || this._size.width;\n      this._size.height = parseInt(newSize[1]) || this._size.height;\n      this.updateScaling();\n    }\n\n    if (isObject(newSize)) {\n      this._size.width = parseInt(newSize.width) || this._size.width;\n      this._size.height = parseInt(newSize.height) || this._size.height;\n      this.updateScaling();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set or get the relative width of the content area of a node.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-17\n   *\n   * @method  columnPadding\n   * @memberOf  ListGraph\n   * @public\n   * @chainable\n   * @param  {Number}  padding  Number in [0.1, 0.66].\n   * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n   *   absolute number. Otherwise a relative number is assumed.\n   * @return  {Number|Object}  When `padding` is passed `this` will be returned\n   *   for chaining. Otherwise the current padding of columns will be returned.\n   */\n  ListGraph.prototype.columnPadding = function (padding, absolute) {\n    if (!arguments.length) {\n      return this._colRelPadding;\n    }\n\n    if (isFiniteNumber(padding)) {\n      if (absolute && isFiniteNumber(this._columnWidth)) {\n        padding = padding / this._columnWidth;\n      }\n      this._colRelPadding = Math.max(Math.min(padding, 0.66), 0.1);\n      this.updateScaling();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set or get the relative width of the content area of a node.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-17\n   *\n   * @method  rowPadding\n   * @memberOf  ListGraph\n   * @public\n   * @chainable\n   * @param  {Number}  padding  Number in [0, 0.5].\n   * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n   *   absolute number. Otherwise a relative number is assumed.\n   * @return  {Number|Object}  When `padding` is passed `this` will be returned\n   *   for chaining. Otherwise the current padding of rows will be returned.\n   */\n  ListGraph.prototype.rowPadding = function (padding, absolute) {\n    if (!arguments.length) {\n      return this._rowRelPadding;\n    }\n\n    if (isFiniteNumber(padding)) {\n      if (absolute && isFiniteNumber(this._rowHeight)) {\n        padding = padding / this._rowHeight;\n      }\n      this._rowRelPadding = Math.max(Math.min(padding, 0.5), 0);\n      this.updateScaling();\n    }\n\n    return this;\n  };\n\n  return ListGraph;\n};\n"],"sourceRoot":"/source/"}