{"version":3,"sources":["d3.layout.listGraph.min.js"],"names":["d3","checkGlobal","value","Object","isFinite","nativeIsFinite","isObject","type","eq","other","assignValue","object","key","objValue","hasOwnProperty$1","call","undefined","copyObject","source","props","customizer","index","length","newValue","baseProperty","isFunction","tag","objectToString","funcTag","genTag","isLength","MAX_SAFE_INTEGER","isArrayLike","getLength","isIndex","MAX_SAFE_INTEGER$1","reIsUint","test","isIterateeCall","apply","func","thisArg","args","isObjectLike","isSymbol","objectToString$1","symbolTag","toNumber","NAN","valueOf","replace","reTrim","isBinary","reIsBinary","reIsOctal","freeParseInt","slice","reIsBadHex","toFinite","INFINITY","sign","MAX_INTEGER","toInteger","result","remainder","rest","start","TypeError","FUNC_ERROR_TEXT","nativeMax","arguments","array","Array","this","otherArgs","createAssigner","assigner","sources","guard","isPrototype","Ctor","constructor","proto","prototype","objectProto$4","getPrototype","nativeGetPrototype","baseHas","hasOwnProperty$2","baseKeys","nativeKeys","baseTimes","n","iteratee","isArrayLikeObject","isArguments","hasOwnProperty$3","propertyIsEnumerable$1","objectToString$2","argsTag","isString","isArray","objectToString$3","stringTag","indexKeys","String","keys","isProto","indexes","skipIndexes","push","traverseGraph","graph","starts","columnCache","nodeOrder","scale","links","processBars","node","data","bars","barRefs","i","len","Math","max","min","barId","id","_i","_len","processLink","target","offsetX","offsetY","outgoing","refs","incoming","total","processNode","parent","duplication","_id","toString","_node","skip","clones","depth","cloneId","children","clone","cloneNum","originalId","originalNode","parents","state","childRefs","above","below","x","y","addSiblings","j","siblings","visited","queue","shift","childId","child","freeGlobal","global","freeSelf","self","thisGlobal","root","Function","objectProto$1","hasOwnProperty","objectProto$2","objectProto$3","parseInt","getPrototypeOf","objectProto$5","objectProto$6","propertyIsEnumerable","objectProto$7","objectProto","nonEnumShadows","assign","SIZE","width","height","GRID","columns","rows","COL_REL_PADDING","ROW_REL_PADDING","CELL_REL_INNER_PADDING","classCallCheck","instance","Constructor","createClass","defineProperties","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","inherits","subClass","superClass","create","setPrototypeOf","__proto__","possibleConstructorReturn","ReferenceError","ExtendableError","_Error","message","_this","name","Error","captureStackTrace","NoRootNodes","_ExtendableError","_cellRelInnerPadding","_grid","_size","_links","_colRelPadding","_rowRelPadding","_columnWidth","_rowHeight","_colAbsPadding","_colAbsContentWidth","_rowAbsPadding","_rowAbsContentHeight","_cellAbsInnerPadding","ListGraphLayout","size","grid","linear","linkPosition","columnNodeOrder","columnSorting","level","arr","end","sortBy","by","sortOrder","order","rootIds","options","_options","sort","compileGlobalProps","nodes","nodesToMatrix","property","itr","getValue","sortProperty","numericSortOrder","obj","precision","recall","toLowerCase","a","b","valueA","valueB","column","padding","contentWidth","row","contentHeight","cell","startLevel","endLevel","allLinks","normStartLevel","normEndLevel","concat","nodeType","newGrid","updateScaling","nodesId","barsData","skipped","hidden","queryMode","domain","range","newSize","absolute","relPadding","layout","listGraph"],"mappings":"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","file":"d3.layout.listGraph.min.js","sourcesContent":["/* Copyright Fritz Lekschas: D3 layout for list-based graphs */\n(function (d3) {\n  'use strict';\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @type {Function}\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\n   *  else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray;\n\n  /**\n   * Checks if `value` is a global object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n   */\n  function checkGlobal(value) {\n    return (value && value.Object === Object) ? value : null;\n  }\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = checkGlobal(typeof global == 'object' && global);\n\n  /** Detect free variable `self`. */\n  var freeSelf = checkGlobal(typeof self == 'object' && self);\n\n  /** Detect `this` as the global object. */\n  var thisGlobal = checkGlobal(typeof undefined == 'object' && undefined);\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeIsFinite = root.isFinite;\n\n  /**\n   * Checks if `value` is a finite primitive number.\n   *\n   * **Note:** This method is based on\n   * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a finite number,\n   *  else `false`.\n   * @example\n   *\n   * _.isFinite(3);\n   * // => true\n   *\n   * _.isFinite(Number.MIN_VALUE);\n   * // => true\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   *\n   * _.isFinite('3');\n   * // => false\n   */\n  function isFinite(value) {\n    return typeof value == 'number' && nativeIsFinite(value);\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'user': 'fred' };\n   * var other = { 'user': 'fred' };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n  function eq(value, other) {\n    return value === other || (value !== value && other !== other);\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$1 = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n\n  /**\n   * Assigns `value` to `key` of `object` if the existing value is not equivalent\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n   * for equality comparisons.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n  function assignValue(object, key, value) {\n    var objValue = object[key];\n    if (!(hasOwnProperty$1.call(object, key) && eq(objValue, value)) ||\n        (value === undefined && !(key in object))) {\n      object[key] = value;\n    }\n  }\n\n  /**\n   * Copies properties of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy properties from.\n   * @param {Array} props The property identifiers to copy.\n   * @param {Object} [object={}] The object to copy properties to.\n   * @param {Function} [customizer] The function to customize copied values.\n   * @returns {Object} Returns `object`.\n   */\n  function copyObject(source, props, object, customizer) {\n    object || (object = {});\n\n    var index = -1,\n        length = props.length;\n\n    while (++index < length) {\n      var key = props[index];\n\n      var newValue = customizer\n        ? customizer(object[key], source[key], key, object, source)\n        : source[key];\n\n      assignValue(object, key, newValue);\n    }\n    return object;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * Gets the \"length\" property value of `object`.\n   *\n   * **Note:** This function is used to avoid a\n   * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects\n   * Safari on at least iOS 8.1-8.3 ARM64.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {*} Returns the \"length\" value.\n   */\n  var getLength = baseProperty('length');\n\n  var funcTag = '[object Function]';\n  var genTag = '[object GeneratorFunction]';\n  /** Used for built-in method references. */\n  var objectProto$2 = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString = objectProto$2.toString;\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\n   *  else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 8 which returns 'object' for typed array and weak map constructors,\n    // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n    var tag = isObject(value) ? objectToString.call(value) : '';\n    return tag == funcTag || tag == genTag;\n  }\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991;\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This function is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length,\n   *  else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n  function isLength(value) {\n    return typeof value == 'number' &&\n      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n  function isArrayLike(value) {\n    return value != null && isLength(getLength(value)) && !isFunction(value);\n  }\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER$1 : length;\n    return !!length &&\n      (typeof value == 'number' || reIsUint.test(value)) &&\n      (value > -1 && value % 1 == 0 && value < length);\n  }\n\n  /**\n   * Checks if the given arguments are from an iteratee call.\n   *\n   * @private\n   * @param {*} value The potential iteratee value argument.\n   * @param {*} index The potential iteratee index or key argument.\n   * @param {*} object The potential iteratee object argument.\n   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n   *  else `false`.\n   */\n  function isIterateeCall(value, index, object) {\n    if (!isObject(object)) {\n      return false;\n    }\n    var type = typeof index;\n    if (type == 'number'\n          ? (isArrayLike(object) && isIndex(index, object.length))\n          : (type == 'string' && index in object)\n        ) {\n      return eq(object[index], value);\n    }\n    return false;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    var length = args.length;\n    switch (length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /** `Object#toString` result references. */\n  var symbolTag = '[object Symbol]';\n\n  /** Used for built-in method references. */\n  var objectProto$3 = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$1 = objectProto$3.toString;\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\n   *  else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike(value) && objectToString$1.call(value) == symbolTag);\n  }\n\n  /** Used as references for various `Number` constants. */\n  var NAN = 0 / 0;\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt = parseInt;\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (isSymbol(value)) {\n      return NAN;\n    }\n    if (isObject(value)) {\n      var other = isFunction(value.valueOf) ? value.valueOf() : value;\n      value = isObject(other) ? (other + '') : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = value.replace(reTrim, '');\n    var isBinary = reIsBinary.test(value);\n    return (isBinary || reIsOctal.test(value))\n      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n      : (reIsBadHex.test(value) ? NAN : +value);\n  }\n\n  var INFINITY = 1 / 0;\n  var MAX_INTEGER = 1.7976931348623157e+308;\n  /**\n   * Converts `value` to a finite number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.12.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted number.\n   * @example\n   *\n   * _.toFinite(3.2);\n   * // => 3.2\n   *\n   * _.toFinite(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toFinite(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toFinite('3.2');\n   * // => 3.2\n   */\n  function toFinite(value) {\n    if (!value) {\n      return value === 0 ? value : 0;\n    }\n    value = toNumber(value);\n    if (value === INFINITY || value === -INFINITY) {\n      var sign = (value < 0 ? -1 : 1);\n      return sign * MAX_INTEGER;\n    }\n    return value === value ? value : 0;\n  }\n\n  /**\n   * Converts `value` to an integer.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted integer.\n   * @example\n   *\n   * _.toInteger(3.2);\n   * // => 3\n   *\n   * _.toInteger(Number.MIN_VALUE);\n   * // => 0\n   *\n   * _.toInteger(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toInteger('3.2');\n   * // => 3\n   */\n  function toInteger(value) {\n    var result = toFinite(value),\n        remainder = result % 1;\n\n    return result === result ? (remainder ? result - remainder : result) : 0;\n  }\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax = Math.max;\n\n  /**\n   * Creates a function that invokes `func` with the `this` binding of the\n   * created function and arguments from `start` and beyond provided as\n   * an array.\n   *\n   * **Note:** This method is based on the\n   * [rest parameter](https://mdn.io/rest_parameters).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Function\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @returns {Function} Returns the new function.\n   * @example\n   *\n   * var say = _.rest(function(what, names) {\n   *   return what + ' ' + _.initial(names).join(', ') +\n   *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n   * });\n   *\n   * say('hello', 'fred', 'barney', 'pebbles');\n   * // => 'hello fred, barney, & pebbles'\n   */\n  function rest(func, start) {\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);\n    return function() {\n      var args = arguments,\n          index = -1,\n          length = nativeMax(args.length - start, 0),\n          array = Array(length);\n\n      while (++index < length) {\n        array[index] = args[start + index];\n      }\n      switch (start) {\n        case 0: return func.call(this, array);\n        case 1: return func.call(this, args[0], array);\n        case 2: return func.call(this, args[0], args[1], array);\n      }\n      var otherArgs = Array(start + 1);\n      index = -1;\n      while (++index < start) {\n        otherArgs[index] = args[index];\n      }\n      otherArgs[start] = array;\n      return apply(func, this, otherArgs);\n    };\n  }\n\n  /**\n   * Creates a function like `_.assign`.\n   *\n   * @private\n   * @param {Function} assigner The function to assign values.\n   * @returns {Function} Returns the new assigner function.\n   */\n  function createAssigner(assigner) {\n    return rest(function(object, sources) {\n      var index = -1,\n          length = sources.length,\n          customizer = length > 1 ? sources[length - 1] : undefined,\n          guard = length > 2 ? sources[2] : undefined;\n\n      customizer = (assigner.length > 3 && typeof customizer == 'function')\n        ? (length--, customizer)\n        : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        customizer = length < 3 ? undefined : customizer;\n        length = 1;\n      }\n      object = Object(object);\n      while (++index < length) {\n        var source = sources[index];\n        if (source) {\n          assigner(object, source, index, customizer);\n        }\n      }\n      return object;\n    });\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$4 = Object.prototype;\n\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$4;\n\n    return value === proto;\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeGetPrototype = Object.getPrototypeOf;\n\n  /**\n   * Gets the `[[Prototype]]` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {null|Object} Returns the `[[Prototype]]`.\n   */\n  function getPrototype(value) {\n    return nativeGetPrototype(Object(value));\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$5 = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$2 = objectProto$5.hasOwnProperty;\n\n  /**\n   * The base implementation of `_.has` without support for deep paths.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {Array|string} key The key to check.\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n   */\n  function baseHas(object, key) {\n    // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\n    // that are composed entirely of index properties, return `false` for\n    // `hasOwnProperty` checks of them.\n    return object != null &&\n      (hasOwnProperty$2.call(object, key) ||\n        (typeof object == 'object' && key in object && getPrototype(object) === null));\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeKeys = Object.keys;\n\n  /**\n   * The base implementation of `_.keys` which doesn't skip the constructor\n   * property of prototypes or treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeys(object) {\n    return nativeKeys(Object(object));\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * This method is like `_.isArrayLike` except that it also checks if `value`\n   * is an object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArrayLikeObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLikeObject(document.body.children);\n   * // => true\n   *\n   * _.isArrayLikeObject('abc');\n   * // => false\n   *\n   * _.isArrayLikeObject(_.noop);\n   * // => false\n   */\n  function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n  }\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]';\n\n  /** Used for built-in method references. */\n  var objectProto$6 = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$3 = objectProto$6.hasOwnProperty;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$2 = objectProto$6.toString;\n\n  /** Built-in value references. */\n  var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;\n\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments(value) {\n    // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\n    return isArrayLikeObject(value) && hasOwnProperty$3.call(value, 'callee') &&\n      (!propertyIsEnumerable$1.call(value, 'callee') || objectToString$2.call(value) == argsTag);\n  }\n\n  /** `Object#toString` result references. */\n  var stringTag = '[object String]';\n\n  /** Used for built-in method references. */\n  var objectProto$7 = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$3 = objectProto$7.toString;\n\n  /**\n   * Checks if `value` is classified as a `String` primitive or object.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\n   *  else `false`.\n   * @example\n   *\n   * _.isString('abc');\n   * // => true\n   *\n   * _.isString(1);\n   * // => false\n   */\n  function isString(value) {\n    return typeof value == 'string' ||\n      (!isArray(value) && isObjectLike(value) && objectToString$3.call(value) == stringTag);\n  }\n\n  /**\n   * Creates an array of index keys for `object` values of arrays,\n   * `arguments` objects, and strings, otherwise `null` is returned.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array|null} Returns index keys, else `null`.\n   */\n  function indexKeys(object) {\n    var length = object ? object.length : undefined;\n    if (isLength(length) &&\n        (isArray(object) || isString(object) || isArguments(object))) {\n      return baseTimes(length, String);\n    }\n    return null;\n  }\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  function keys(object) {\n    var isProto = isPrototype(object);\n    if (!(isProto || isArrayLike(object))) {\n      return baseKeys(object);\n    }\n    var indexes = indexKeys(object),\n        skipIndexes = !!indexes,\n        result = indexes || [],\n        length = result.length;\n\n    for (var key in object) {\n      if (baseHas(object, key) &&\n          !(skipIndexes && (key == 'length' || isIndex(key, length))) &&\n          !(isProto && key == 'constructor')) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Built-in value references. */\n  var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n  /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\n  var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n  /**\n   * Assigns own enumerable string keyed properties of source objects to the\n   * destination object. Source objects are applied from left to right.\n   * Subsequent sources overwrite property assignments of previous sources.\n   *\n   * **Note:** This method mutates `object` and is loosely based on\n   * [`Object.assign`](https://mdn.io/Object/assign).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.10.0\n   * @category Object\n   * @param {Object} object The destination object.\n   * @param {...Object} [sources] The source objects.\n   * @returns {Object} Returns `object`.\n   * @see _.assignIn\n   * @example\n   *\n   * function Foo() {\n   *   this.c = 3;\n   * }\n   *\n   * function Bar() {\n   *   this.e = 5;\n   * }\n   *\n   * Foo.prototype.d = 4;\n   * Bar.prototype.f = 6;\n   *\n   * _.assign({ 'a': 1 }, new Foo, new Bar);\n   * // => { 'a': 1, 'c': 3, 'e': 5 }\n   */\n  var assign = createAssigner(function(object, source) {\n    if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n      copyObject(source, keys(source), object);\n      return;\n    }\n    for (var key in source) {\n      if (hasOwnProperty.call(source, key)) {\n        assignValue(object, key, source[key]);\n      }\n    }\n  });\n\n  /**\n   * Default size\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var SIZE = {\n    width: 300,\n    height: 300\n  };\n\n  /**\n   * Default grid\n   *\n   * @constant\n   * @default\n   * @type  {Object}\n   */\n  var GRID = {\n    columns: 3,\n    rows: 3\n  };\n\n  /**\n   * Default relative padding of columns.\n   *\n   * @description\n   * Padding between columns refers to the left and right inner padding used\n   * for links between items in the column. Padding is relative to the overall\n   * width of the column.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var COL_REL_PADDING = 0.2;\n\n  /**\n   * Default relative padding of rows.\n   *\n   * @description\n   * Padding between rows refers to the top and bottom inner padding used to\n   * separate items vertically in the column. Padding is relative to the overall\n   * height of the row.\n   *\n   * @constant\n   * @default\n   * @type  {Number}\n   */\n  var ROW_REL_PADDING = 0.05;\n\n  /**\n   * Default inner padding of a cell relative to the shorter dimension, e.g.\n   * width or height.\n   *\n   * @type  {Number}\n   */\n  var CELL_REL_INNER_PADDING = 0.05;\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var inherits = function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  var possibleConstructorReturn = function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n\n  var ExtendableError = function (_Error) {\n    inherits(ExtendableError, _Error);\n\n    function ExtendableError(message) {\n      classCallCheck(this, ExtendableError);\n\n      var _this = possibleConstructorReturn(this, Object.getPrototypeOf(ExtendableError).call(this, message));\n\n      _this.name = _this.constructor.name;\n      _this.message = message;\n      Error.captureStackTrace(_this, _this.constructor.name);\n      return _this;\n    }\n\n    return ExtendableError;\n  }(Error);\n\n  var NoRootNodes = function (_ExtendableError) {\n    inherits(NoRootNodes, _ExtendableError);\n\n    function NoRootNodes(message) {\n      classCallCheck(this, NoRootNodes);\n      return possibleConstructorReturn(this, Object.getPrototypeOf(NoRootNodes).call(this, message || 'No root node IDs specified.'));\n    }\n\n    return NoRootNodes;\n  }(ExtendableError);\n\n  /**\n   * Traverse graph in a breadth-first search fashion and process nodes along\n   * the traversal.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-13\n   *\n   * @private\n   * @method  traverseGraph\n   * @param  {Object}  graph  Graph to be traversed\n   * @param  {Array}  starts  Array of node IDs for start the traversal.\n   * @param  {Object}  columnCache  Cache storing node IDs per column.\n   * @param  {Object}  scale  D3 linear scale functions for the\n   *    x-axis (columns), y-axis (rows) and other stuff.\n   * œparam  {Object}  links  Object storing links data.\n   */\n  function traverseGraph(graph, starts, columnCache, nodeOrder, scale, links) {\n    var visited = {};\n    var queue = [];\n\n    /**\n     * Ensure that the bar values are in [0,1] and that the structure of `bars`\n     * is unified.\n     *\n     * @description\n     * Each node can feature a number of bars representing some value. The layout\n     * can handle two structure, an object-based and an array-based structure.\n     *\n     * Object-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": {\n     *       \"propertyA\": 0.9,\n     *       \"propertyB\": 0.5\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Array-based model:\n     * ```\n     * {\n     *   children: [...],\n     *   data: {\n     *     \"name\": \"whatever\",\n     *     \"bars\": [{\n     *         \"id\": \"propertyA\",\n     *         \"value\": 0.9\n     *       }, {\n     *         \"id\": \"propertyB\",\n     *         \"value\": 0.5\n     *       }\n     *     ]\n     *   }\n     * }\n     * ```\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-18\n     *\n     * @method  processBars\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  node  Node to be processed.\n     */\n    function processBars(node) {\n      if (node.data.bars) {\n        if (isArray(node.data.bars)) {\n          node.data.barRefs = {};\n          for (var i = 0, len = node.data.bars.length; i < len; i++) {\n            node.data.bars[i].value = Math.max(Math.min(node.data.bars[i].value, 1), 0);\n            node.data.bars[i].barId = node.id + '.' + node.data.bars[i].id;\n            node.data.barRefs[node.data.bars[i].id] = node.data.bars[i].value;\n          }\n        } else if (isObject(node.data.bars)) {\n          var bars = [];\n          var keys = Object.keys(node.data.bars);\n          // Keep the old object reference for quick access, e.g.\n          // `node.data.barRefs.precision`\n          node.data.barRefs = {};\n          for (var _i = 0, _len = keys.length; _i < _len; _i++) {\n            node.data.barRefs[keys[_i]] = Math.max(Math.min(node.data.bars[keys[_i]], 1), 0);\n            bars.push({\n              barId: node.id + '.' + keys[_i],\n              id: keys[_i],\n              value: node.data.barRefs[keys[_i]]\n            });\n          }\n          node.data.bars = bars;\n        }\n      }\n    }\n\n    /**\n     * Process outgoing links and add them to the source\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-17\n     *\n     * @method  processLink\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {Object}  source  Source node.\n     * @param  {Object}  target  Target node.\n     */\n    function processLink(source, target) {\n      var id = '(' + source.id + ')->(' + target.id + ')';\n\n      links[id] = {\n        id: id,\n        source: {\n          node: source,\n          offsetX: 0,\n          offsetY: 0\n        },\n        target: {\n          node: target,\n          offsetX: 0,\n          offsetY: 0\n        }\n      };\n\n      source.links.outgoing.refs.push(links[id]);\n      target.links.incoming.refs.push(links[id]);\n\n      source.links.outgoing.total++;\n      target.links.incoming.total++;\n    }\n\n    /**\n     * Process a node, e.g. assign `x` and `y`, clone node etc.\n     *\n     * @description\n     * Nodes are edited in place.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-13\n     *\n     * @method  processNode\n     * @private\n     * @memberOf  traverseGraph\n     * @param  {String}  id  Node ID.\n     * @param  {Object}  node  Node to be processed.\n     * @param  {Object}  parent  Parent node.\n     * @param  {Boolean}  duplication  If `true` node needs to be duplicated or\n     *   cloned.\n     */\n    function processNode(id, node, parent, duplication) {\n      var _id = id.toString();\n      var _node = node;\n      var skip = false;\n\n      if (duplication) {\n        // Check if there is already another clone on the same level. If so, skip\n        // creating a new clone. The rationale is to have only one clone per\n        // level.\n        for (var i = node.clones.length; i--;) {\n          if (node.clones[i].depth === parent.depth + 1) {\n            skip = true;\n            _id = node.clones[i].cloneId;\n            _node = node.clones[i];\n            break;\n          }\n        }\n\n        // Clone node only when the parent is **not** just one level before the\n        // clone because then the parent can simple link to the _original node_.\n        if (parent.depth + 1 !== node.depth && !skip) {\n          var cloneId = id + '.' + (node.clones.length + 1);\n          graph[cloneId] = {\n            children: [],\n            clone: true,\n            cloneId: cloneId,\n            cloneNum: node.clones.length + 1,\n            // Data will be referenced rather than copied to avoid inconsistencies\n            data: node.data,\n            originalId: id.toString(),\n            // Reference to the original node\n            originalNode: node\n          };\n          _id = cloneId;\n          _node = graph[cloneId];\n          // Add a reference to the original node that points to the clone.\n          node.clones.push(_node);\n          // Remove parent\n          node.parents[parent.id] = undefined;\n          delete node.parents[parent.id];\n        }\n      } else {\n        _node.clones = [];\n      }\n\n      _node.id = _id;\n\n      if (!_node.parents) {\n        _node.parents = {};\n      }\n      if (parent) {\n        _node.parents[parent.id] = parent;\n      } else {\n        _node.parents = {};\n      }\n\n      if (!_node.data.state) {\n        _node.data.state = {};\n      }\n\n      if (!_node.childRefs) {\n        _node.childRefs = [];\n      }\n\n      if (parent) {\n        _node.depth = parent.depth + 1;\n        parent.childRefs.push(_node);\n      } else {\n        _node.depth = 0;\n      }\n\n      if (!_node.links) {\n        _node.links = {\n          incoming: {\n            refs: [],\n            above: 0,\n            below: 0,\n            total: 0\n          },\n          outgoing: {\n            refs: [],\n            above: 0,\n            below: 0,\n            total: 0\n          }\n        };\n      }\n\n      if (!columnCache[_node.depth]) {\n        columnCache[_node.depth] = {};\n        nodeOrder[_node.depth] = [];\n      }\n\n      if (!columnCache[_node.depth][_id]) {\n        columnCache[_node.depth][_id] = true;\n        nodeOrder[_node.depth].push(_node);\n        _node.x = scale.x(_node.depth);\n        _node.y = scale.y(Object.keys(columnCache[_node.depth]).length - 1);\n      }\n\n      processBars(_node);\n\n      if (parent) {\n        processLink(parent, _node);\n      }\n    }\n\n    function addSiblings() {\n      for (var i = starts.length; i--;) {\n        for (var j = starts.length; j--;) {\n          if (i !== j) {\n            if (!graph[starts[i]].siblings) {\n              graph[starts[i]].siblings = {};\n            }\n            graph[starts[i]].siblings[starts[j]] = graph[starts[j]];\n          }\n        }\n      }\n    }\n\n    // BFS for each start node.\n    for (var i = starts.length; i--;) {\n      if (!graph[starts[i]]) {\n        return;\n      }\n\n      processNode(starts[i], graph[starts[i]]);\n\n      queue.push(starts[i]);\n      visited[starts[i]] = true;\n\n      while (queue.length > 0) {\n        var node = graph[queue.shift()];\n\n        for (var j = node.children.length; j--;) {\n          var childId = node.children[j];\n          var child = graph[childId];\n\n          if (!!child) {\n            var clone = true;\n\n            if (!visited[childId]) {\n              queue.push(childId);\n              visited[childId] = true;\n              clone = false;\n            }\n\n            processNode(childId, child, node, clone);\n          }\n        }\n      }\n    }\n\n    addSiblings();\n  }\n\n  // Private variables\n  var _cellRelInnerPadding = CELL_REL_INNER_PADDING;\n  var _grid = {\n    columns: GRID.columns,\n    rows: GRID.rows\n  };\n  var _size = {\n    width: SIZE.width,\n    height: SIZE.height\n  };\n  var _links = {};\n\n  var _colRelPadding = COL_REL_PADDING;\n  var _rowRelPadding = ROW_REL_PADDING;\n  var _columnWidth = void 0;\n  var _rowHeight = void 0;\n  var _colAbsPadding = void 0;\n  var _colAbsContentWidth = void 0;\n  var _rowAbsPadding = void 0;\n  var _rowAbsContentHeight = void 0;\n  var _cellAbsInnerPadding = void 0;\n\n  var ListGraphLayout = function () {\n    /**\n     * ListGraph class constructor.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @constructor\n     * @param  {Array|Object}  size  New size. Can either be an Array, e.g.\n     *   `[200,20]` or an Object, e.g. `{width: 200, height: 20}`.\n     * @param  {Array|Object}  grid  New grid configuration. Can either be an\n     *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n     */\n\n    function ListGraphLayout(size, grid) {\n      classCallCheck(this, ListGraphLayout);\n\n      this.scale = {\n        x: d3.scale.linear(),\n        y: d3.scale.linear(),\n        linkPosition: {}\n      };\n\n      this.grid(grid);\n      this.size(size);\n\n      this.columnCache = {};\n      this.columns = {};\n      this.columnNodeOrder = {};\n      this.columnSorting = {};\n    }\n\n    /**\n     * Convert an object-based list of nodes into an array of arrays of nodes.\n     *\n     * @description\n     * Representing a graph using hierarchical data structures such as an Array is\n     * difficult. To save resources and avoid complex structures a graph is\n     * represented as a simple list of nodes. The list correspondes to an objects\n     * where the object's keys stand for node identifiers. This ensures uniqueness\n     * but has the disadvantage that D3 doesn't know what to do with it, thus we\n     * have to convert that structure into a fat array of array of nodes. It's\n     * important to notice that the nodes are *not* cloned into the array but\n     * instead simply linked using references.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-12-04\n     *\n     * @method  nodesToMatrix\n     * @memberOf  ListGraph\n     * @public\n     * @param  {Integer}  Level for which nodes should be returned.\n     * @return  {Array}  Fat array of arrays of nodes.\n     */\n\n\n    createClass(ListGraphLayout, [{\n      key: 'nodesToMatrix',\n      value: function nodesToMatrix(level) {\n        var arr = [];\n\n        var start = 0;\n        var end = Object.keys(this.columnCache).length;\n\n        if (isFinite(level)) {\n          start = level;\n          end = level + 1;\n        }\n\n        for (var i = start; i < end; i++) {\n          arr.push({\n            y: 0,\n            x: this.scale.x(i),\n            level: i,\n            rows: [],\n            sortBy: this.columnSorting[i].by,\n            sortOrder: this.columnSorting[i].order\n          });\n          var keys = Object.keys(this.columnCache[i]);\n          for (var j = keys.length; j--;) {\n            arr[i - start].rows.push(this.data[keys[j]]);\n          }\n        }\n\n        return arr;\n      }\n\n      /**\n       * Process original data and return an D3 ready Array.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-12-28\n       *\n       * @method  process\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Object}  data  Object list of nodes.\n       * @param  {Array}  rootIds  Array of node IDs to start traversal.\n       * @param  {Object}  options  Object holding extra options such as sorting.\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'process',\n      value: function process(data, rootIds, options) {\n        this.data = data || this.data;\n        this.rootIds = rootIds || this.rootIds;\n\n        if (!isArray(this.rootIds)) {\n          if (isFinite(this.rootIds)) {\n            this.rootIds = [this.rootIds];\n          } else {\n            throw new NoRootNodes('No root node IDs specified.');\n          }\n        }\n\n        var _options = assign({}, options);\n\n        traverseGraph(this.data, this.rootIds, this.columnCache, this.columnNodeOrder, this.scale, _links);\n\n        for (var i = Object.keys(this.columnCache).length; i--;) {\n          this.columnSorting[i] = {};\n        }\n\n        if (_options.sortBy) {\n          this.sort(undefined, options.sortBy, options.sortOrder || 'desc');\n        }\n\n        return {\n          global: this.compileGlobalProps(),\n          nodes: this.nodesToMatrix()\n        };\n      }\n\n      /**\n       * Sorts nodes of all or a specific level according to a property and order.\n       *\n       * @description\n       * Currently nodes can only be sorted by _precision_, _recall_ or by name.\n       *\n       * @method  sort\n       * @author  Fritz Lekschas\n       * @date    2015-12-04\n       * @param  {Integer}  level  Specifies the level which should be sorted.\n       * @param  {String}  property   The property used for sorting. Can be one of\n       *   ['precision', 'recall', 'name'].\n       * @param  {Integer}  sortOrder  If `1` sort asc. If `-1` sort desc.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'sort',\n      value: function sort(level, property, sortOrder) {\n        var itr = 0;\n        var end = Object.keys(this.columnCache).length;\n        var getValue = void 0;\n        var sortProperty = void 0;\n\n        // 1 = asc, -1 = desc [default]\n        var numericSortOrder = sortOrder === 1 ? 1 : -1;\n\n        switch (property) {\n          case 'precision':\n            sortProperty = 'precision';\n            getValue = function getValue(obj) {\n              return obj.data.barRefs.precision;\n            };\n            break;\n          case 'recall':\n            sortProperty = 'recall';\n            getValue = function getValue(obj) {\n              return obj.data.barRefs.recall;\n            };\n            break;\n          default:\n            getValue = function getValue(obj) {\n              return obj.data.name.toLowerCase();\n            };\n            sortProperty = 'name';\n            break;\n        }\n\n        if (isFinite(level)) {\n          itr = level;\n          end = level + 1;\n        }\n\n        for (itr; itr < end; itr++) {\n          this.columnNodeOrder[itr].sort(function (a, b) {\n            // eslint-disable-line no-loop-func\n            var valueA = getValue(a);\n            var valueB = getValue(b);\n\n            if (valueA > valueB) {\n              return numericSortOrder;\n            }\n            if (valueA < valueB) {\n              return -numericSortOrder;\n            }\n            return 0;\n          });\n\n          this.columnSorting[itr].by = sortProperty;\n          this.columnSorting[itr].order = numericSortOrder;\n\n          // Update `y` according to the new position.\n          for (var i = this.columnNodeOrder[itr].length; i--;) {\n            this.columnNodeOrder[itr][i].y = this.scale.y(i);\n          }\n        }\n\n        return this;\n      }\n\n      /**\n       * Compiles an object of global properties of the visualization.\n       *\n       * @description\n       * Global properties comprise all properties that can be applied to globally\n       * across the visualization such as the width and padding of columns or the\n       * height and padding of rows.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-17\n       *\n       * @method  compileGlobalProps\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @return  {Object}  Object with global properties.\n       */\n\n    }, {\n      key: 'compileGlobalProps',\n      value: function compileGlobalProps() {\n        return {\n          column: {\n            width: _columnWidth,\n            height: _size.height,\n            padding: _colAbsPadding,\n            contentWidth: _colAbsContentWidth\n          },\n          row: {\n            height: _rowHeight,\n            padding: _rowAbsPadding,\n            contentHeight: _rowAbsContentHeight\n          },\n          cell: {\n            padding: _cellAbsInnerPadding\n          }\n        };\n      }\n\n      /**\n       * Returns the processed nodes as an Array of Array of nodes.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-16\n       *\n       * @method  nodes\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Integer}  Level for which nodes should be returned.\n       * @return  {Array}  Array of Array of nodes.\n       */\n\n    }, {\n      key: 'nodes',\n      value: function nodes(level) {\n        return this.nodesToMatrix(level);\n      }\n\n      /**\n       * Returns an array of outgoing links per level, i.e. column, or all outgoing\n       * links.\n       *\n       * @description\n       * The column ID and level might be the same for small graphs but it's\n       * possible that the first column does not represent the first level.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-12-04\n       *\n       * @method  links\n       * @memberOf  ListGraph\n       * @public\n       * @category  Data\n       * @param  {Integer}  startLevel  Start level for returning links. If `to` is\n       *   not specified that only links from `start` level are returned.\n       * @param  {Integer}  endLevel  End level for returning links. So all links\n       *   from `start` to `to` (including) will be returned\n       * @return  {Array}  Array of objects containing the information for outgoing\n       *   links.\n       */\n\n    }, {\n      key: 'links',\n      value: function links(startLevel, endLevel) {\n        var allLinks = [];\n\n        var keys = [];\n\n        if (!isFinite(startLevel)) {\n          keys = Object.keys(this.data);\n        } else {\n          var normStartLevel = Math.max(startLevel, 0);\n          var normEndLevel = isFinite(endLevel) ? Math.min(endLevel, Object.keys(this.columnCache).length) : normStartLevel + 1;\n\n          for (var i = normStartLevel; i < normEndLevel; i++) {\n            keys = keys.concat(Object.keys(this.columnCache[i]));\n          }\n        }\n\n        for (var _i = keys.length; _i--;) {\n          if (this.data[keys[_i]].links) {\n            allLinks = allLinks.concat(this.data[keys[_i]].links.outgoing.refs);\n          }\n        }\n\n        return allLinks;\n      }\n\n      /**\n       * Offset one end of all links per level vertically.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-18\n       *\n       * @method  offsetLinks\n       * @memberOf  ListGraph\n       * @public\n       * @category  Links\n       * @param  {Integer}  level  If given get's only links of a certain level. The\n       *   level of a node is relative to the length of the shortest path to the\n       *   root node.\n       * @param  {Number}  offsetY  The amount that one end of the link should be\n       *   offset vertically.\n       * @param  {String}  nodeType  Defines which end of the link should be\n       *   shifted. This can either be `source` or `traget`.\n       * @return  {Array}  Array of objects containing the information of the\n       *   modified outgoing links.\n       */\n\n    }, {\n      key: 'offsetLinks',\n      value: function offsetLinks(level, offsetY, nodeType) {\n        var links = this.links(level);\n\n        if ((nodeType === 'source' || nodeType === 'target') && isFinite(offsetY)) {\n          for (var i = links.length; i--;) {\n            links[i][nodeType].offsetY = offsetY;\n          }\n        }\n\n        return links;\n      }\n\n      /**\n       * Set or get the grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date    2015-11-10\n       *\n       * @method  grid\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @category  Data\n       * @param  {Array|Object}  newGrid  New grid configuration. Can either be an\n       *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'grid',\n      value: function grid(newGrid) {\n        if (!newGrid) {\n          return _grid;\n        }\n\n        if (isArray(newGrid)) {\n          _grid.columns = parseInt(newGrid[0], 10) || _grid.columns;\n          _grid.rows = parseInt(newGrid[1], 10) || _grid.rows;\n          this.updateScaling();\n        }\n\n        if (isObject(newGrid)) {\n          _grid.columns = parseInt(newGrid.columns, 10) || _grid.columns;\n          _grid.rows = parseInt(newGrid.rows, 10) || _grid.rows;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n    }, {\n      key: 'updateBars',\n      value: function updateBars(graph) {\n        var nodesId = Object.keys(graph);\n        var barsData = [];\n\n        for (var i = nodesId.length; i--;) {\n          for (var j = graph[nodesId[i]].data.bars.length; j--;) {\n            barsData.push({\n              barId: nodesId[i] + '.' + graph[nodesId[i]].data.bars[j].id,\n              id: graph[nodesId[i]].data.bars[j].id,\n              value: graph[nodesId[i]].data.bars[j].value\n            });\n          }\n        }\n\n        return barsData;\n      }\n\n      /**\n       * Update vertical position when filtering, i.e. hiding, nodes.\n       *\n       * @method  updateNodeVisibility\n       * @author  Fritz Lekschas\n       * @date    2016-01-17\n       */\n\n    }, {\n      key: 'updateNodesVisibility',\n      value: function updateNodesVisibility() {\n        var skipped = void 0;\n\n        for (var i = Object.keys(this.columnCache).length; i--;) {\n          skipped = 0;\n          // Update `y` according to the number of previously skipped nodes.\n          for (var j = 0, len = this.columnNodeOrder[i].length; j < len; j++) {\n            if (this.columnNodeOrder[i][j].hidden && !this.columnNodeOrder[i][j].data.queryMode) {\n              skipped++;\n            }\n            this.columnNodeOrder[i][j].y = this.scale.y(j - skipped);\n          }\n        }\n\n        return this;\n      }\n\n      /**\n       * Updates scaling according to the size and grid configuration.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  updateScaling\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'updateScaling',\n      value: function updateScaling() {\n        this.scale.x.domain([0, _grid.columns]).range([0, _size.width]);\n        this.scale.y.domain([0, _grid.rows]).range([0, _size.height]);\n\n        _columnWidth = _size.width / _grid.columns;\n        _rowHeight = _size.height / _grid.rows;\n\n        _colAbsPadding = _columnWidth * _colRelPadding;\n        _colAbsContentWidth = _columnWidth * (1 - 2 * _colRelPadding);\n\n        _rowAbsPadding = Math.max(_rowHeight * _rowRelPadding, 2);\n        _rowAbsContentHeight = _rowHeight - 2 * _rowAbsPadding;\n\n        _cellAbsInnerPadding = _cellRelInnerPadding * Math.min(_colAbsContentWidth, _rowAbsContentHeight, 1);\n\n        return this;\n      }\n\n      /**\n       * Set or get the size of the layout.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-10\n       *\n       * @method  size\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Array|Object}  newSize  New size. Can either be an Array, e.g.\n       *   `[200, 20]` or an Object, e.g. `{width: 200, height: 20}`.\n       * @return  {Object}  Self.\n       */\n\n    }, {\n      key: 'size',\n      value: function size(newSize) {\n        if (!newSize) {\n          return _size;\n        }\n\n        if (isArray(newSize)) {\n          _size.width = parseInt(newSize[0], 10) || _size.width;\n          _size.height = parseInt(newSize[1], 10) || _size.height;\n          this.updateScaling();\n        }\n\n        if (isObject(newSize)) {\n          _size.width = parseInt(newSize.width, 10) || _size.width;\n          _size.height = parseInt(newSize.height, 10) || _size.height;\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  columnPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0.1, 0.66].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of columns will be returned.\n       */\n\n    }, {\n      key: 'columnPadding',\n      value: function columnPadding(padding, absolute) {\n        if (!padding) {\n          return _colRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          var relPadding = padding;\n          if (absolute && isFinite(_columnWidth)) {\n            relPadding = padding / _columnWidth;\n          }\n          _colRelPadding = Math.max(Math.min(relPadding, 0.66), 0.1);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n\n      /**\n       * Set or get the relative width of the content area of a node.\n       *\n       * @author  Fritz Lekschas\n       * @date  2015-11-17\n       *\n       * @method  rowPadding\n       * @memberOf  ListGraph\n       * @public\n       * @chainable\n       * @param  {Number}  padding  Number in [0, 0.5].\n       * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n       *   absolute number. Otherwise a relative number is assumed.\n       * @return  {Number|Object}  When `padding` is passed `this` will be returned\n       *   for chaining. Otherwise the current padding of rows will be returned.\n       */\n\n    }, {\n      key: 'rowPadding',\n      value: function rowPadding(padding, absolute) {\n        if (!padding) {\n          return _rowRelPadding;\n        }\n\n        if (isFinite(padding)) {\n          var relPadding = padding;\n          if (absolute && isFinite(_rowHeight)) {\n            relPadding = padding / _rowHeight;\n          }\n          _rowRelPadding = Math.max(Math.min(relPadding, 0.5), 0);\n          this.updateScaling();\n        }\n\n        return this;\n      }\n    }]);\n    return ListGraphLayout;\n  }();\n\n  d3.layout.listGraph = ListGraphLayout;\n\n}(d3));"],"sourceRoot":"/source/"}