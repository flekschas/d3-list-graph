{"version":3,"sources":["d3.listGraph.min.js"],"names":["global","factory","exports","module","require","define","amd","d3","this","isFinite","value","nativeIsFinite","isObject","type","eq","other","assignValue","object","key","objValue","hasOwnProperty$1","call","undefined","copyObject","source","props","customizer","index","length","newValue","apply","func","thisArg","args","baseRest","start","nativeMax","arguments","array","Array","otherArgs","isFunction","tag","objectToString","funcTag","genTag","isLength","MAX_SAFE_INTEGER","isArrayLike","isIndex","MAX_SAFE_INTEGER$1","reIsUint","test","isIterateeCall","createAssigner","assigner","sources","guard","Object","isPrototype","Ctor","constructor","proto","prototype","objectProto$3","baseTimes","n","iteratee","result","isObjectLike","isArrayLikeObject","isArguments","hasOwnProperty$3","propertyIsEnumerable$1","objectToString$1","argsTag","arrayLikeKeys","inherited","isArray","String","skipIndexes","hasOwnProperty$2","push","overArg","transform","arg","baseKeys","nativeKeys","hasOwnProperty$4","keys","traverseGraph","graph","starts","columnCache","nodeOrder","scale","links","processBars","node","data","bars","barRefs","i","len","Math","max","min","barId","id","_i","_len","processLink","target","offsetX","offsetY","outgoing","refs","incoming","total","processNode","parent","duplication","_id","toString","_node","skip","clones","depth","cloneId","children","clone","cloneNum","originalId","originalNode","parents","state","childRefs","above","below","x","y","addSiblings","j","siblings","visited","queue","shift","childId","child","freeGlobal","freeSelf","self","root","Function","objectProto$1","hasOwnProperty","objectProto$2","objectProto$5","propertyIsEnumerable","objectProto$4","objectProto$6","objectProto","nonEnumShadows","valueOf","assign","SIZE","width","height","GRID","columns","rows","COL_REL_PADDING","ROW_REL_PADDING","CELL_REL_INNER_PADDING","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","inherits","subClass","superClass","create","setPrototypeOf","__proto__","possibleConstructorReturn","ReferenceError","ExtendableError","_Error","message","_this","getPrototypeOf","name","Error","captureStackTrace","D3VersionFourRequired","_ExtendableError","versionFound","NoRootNodes","_d3","_cellRelInnerPadding","_grid","_size","_links","_colRelPadding","_rowRelPadding","_columnWidth","_rowHeight","_colAbsPadding","_colAbsContentWidth","_rowAbsPadding","_rowAbsContentHeight","_cellAbsInnerPadding","ListGraphLayout","size","grid","specificD3","version","scaleLinear","linkPosition","columnNodeOrder","columnSorting","level","arr","end","sortBy","by","sortOrder","order","rootIds","options","_options","sort","compileGlobalProps","nodes","nodesToMatrix","property","itr","getValue","sortProperty","numericSortOrder","obj","precision","recall","toLowerCase","a","b","valueA","valueB","column","padding","contentWidth","row","contentHeight","cell","startLevel","endLevel","allLinks","normStartLevel","normEndLevel","concat","nodeType","newGrid","parseInt","updateScaling","nodesId","barsData","skipped","hidden","queryMode","domain","range","newSize","absolute","relPadding","listGraph"],"mappings":"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","file":"d3.listGraph.min.js","sourcesContent":["/* Copyright Fritz Lekschas: D3 layout for list-like graphs */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3'], factory) :\n  (factory((global.d3 = global.d3 || {}),global.d3));\n}(this, (function (exports,d3) { 'use strict';\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite;\n\n/**\n * Checks if `value` is a finite primitive number.\n *\n * **Note:** This method is based on\n * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n * @example\n *\n * _.isFinite(3);\n * // => true\n *\n * _.isFinite(Number.MIN_VALUE);\n * // => true\n *\n * _.isFinite(Infinity);\n * // => false\n *\n * _.isFinite('3');\n * // => false\n */\nfunction isFinite(value) {\n  return typeof value == 'number' && nativeIsFinite(value);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty$1.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto$2.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/** Used for built-in method references. */\nvar objectProto$3 = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$3;\n\n  return value === proto;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/** Used for built-in method references. */\nvar objectProto$5 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$5.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$1 = objectProto$5.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable$1 = objectProto$5.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty$3.call(value, 'callee') &&\n    (!propertyIsEnumerable$1.call(value, 'callee') || objectToString$1.call(value) == argsTag);\n}\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$4.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$2.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/** Used for built-in method references. */\nvar objectProto$6 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$4 = objectProto$6.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty$4.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\n/**\n * Default size\n *\n * @constant\n * @default\n * @type  {Object}\n */\nvar SIZE = {\n  width: 300,\n  height: 300\n};\n\n/**\n * Default grid\n *\n * @constant\n * @default\n * @type  {Object}\n */\nvar GRID = {\n  columns: 3,\n  rows: 3\n};\n\n/**\n * Default relative padding of columns.\n *\n * @description\n * Padding between columns refers to the left and right inner padding used\n * for links between items in the column. Padding is relative to the overall\n * width of the column.\n *\n * @constant\n * @default\n * @type  {Number}\n */\nvar COL_REL_PADDING = 0.2;\n\n/**\n * Default relative padding of rows.\n *\n * @description\n * Padding between rows refers to the top and bottom inner padding used to\n * separate items vertically in the column. Padding is relative to the overall\n * height of the row.\n *\n * @constant\n * @default\n * @type  {Number}\n */\nvar ROW_REL_PADDING = 0.05;\n\n/**\n * Default inner padding of a cell relative to the shorter dimension, e.g.\n * width or height.\n *\n * @type  {Number}\n */\nvar CELL_REL_INNER_PADDING = 0.05;\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar ExtendableError = function (_Error) {\n  inherits(ExtendableError, _Error);\n\n  function ExtendableError(message) {\n    classCallCheck(this, ExtendableError);\n\n    var _this = possibleConstructorReturn(this, (ExtendableError.__proto__ || Object.getPrototypeOf(ExtendableError)).call(this, message));\n\n    _this.name = _this.constructor.name;\n    _this.message = message;\n    Error.captureStackTrace(_this, _this.constructor.name);\n    return _this;\n  }\n\n  return ExtendableError;\n}(Error);\n\nvar D3VersionFourRequired = function (_ExtendableError) {\n  inherits(D3VersionFourRequired, _ExtendableError);\n\n  function D3VersionFourRequired(versionFound) {\n    classCallCheck(this, D3VersionFourRequired);\n    return possibleConstructorReturn(this, (D3VersionFourRequired.__proto__ || Object.getPrototypeOf(D3VersionFourRequired)).call(this, 'D3 version 4 is required to run the code. Found version ' + versionFound));\n  }\n\n  return D3VersionFourRequired;\n}(ExtendableError);\n\nvar NoRootNodes = function (_ExtendableError) {\n  inherits(NoRootNodes, _ExtendableError);\n\n  function NoRootNodes(message) {\n    classCallCheck(this, NoRootNodes);\n    return possibleConstructorReturn(this, (NoRootNodes.__proto__ || Object.getPrototypeOf(NoRootNodes)).call(this, message || 'No root node IDs specified.'));\n  }\n\n  return NoRootNodes;\n}(ExtendableError);\n\n// External\n/**\n * Traverse graph in a breadth-first search fashion and process nodes along\n * the traversal.\n *\n * @author  Fritz Lekschas\n * @date  2015-11-13\n *\n * @private\n * @method  traverseGraph\n * @param  {Object}  graph  Graph to be traversed\n * @param  {Array}  starts  Array of node IDs for start the traversal.\n * @param  {Object}  columnCache  Cache storing node IDs per column.\n * @param  {Object}  scale  D3 linear scale functions for the\n *    x-axis (columns), y-axis (rows) and other stuff.\n * œparam  {Object}  links  Object storing links data.\n */\nfunction traverseGraph(graph, starts, columnCache, nodeOrder, scale, links) {\n  var visited = {};\n  var queue = [];\n\n  /**\n   * Ensure that the bar values are in [0,1] and that the structure of `bars`\n   * is unified.\n   *\n   * @description\n   * Each node can feature a number of bars representing some value. The layout\n   * can handle two structure, an object-based and an array-based structure.\n   *\n   * Object-based model:\n   * ```\n   * {\n   *   children: [...],\n   *   data: {\n   *     \"name\": \"whatever\",\n   *     \"bars\": {\n   *       \"propertyA\": 0.9,\n   *       \"propertyB\": 0.5\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Array-based model:\n   * ```\n   * {\n   *   children: [...],\n   *   data: {\n   *     \"name\": \"whatever\",\n   *     \"bars\": [{\n   *         \"id\": \"propertyA\",\n   *         \"value\": 0.9\n   *       }, {\n   *         \"id\": \"propertyB\",\n   *         \"value\": 0.5\n   *       }\n   *     ]\n   *   }\n   * }\n   * ```\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-18\n   *\n   * @method  processBars\n   * @private\n   * @memberOf  traverseGraph\n   * @param  {Object}  node  Node to be processed.\n   */\n  function processBars(node) {\n    if (node.data.bars) {\n      if (isArray(node.data.bars)) {\n        node.data.barRefs = {};\n        for (var i = 0, len = node.data.bars.length; i < len; i++) {\n          node.data.bars[i].value = Math.max(Math.min(node.data.bars[i].value, 1), 0);\n          node.data.bars[i].barId = node.id + '.' + node.data.bars[i].id;\n          node.data.barRefs[node.data.bars[i].id] = node.data.bars[i].value;\n        }\n      } else if (isObject(node.data.bars)) {\n        var bars = [];\n        var keys = Object.keys(node.data.bars);\n        // Keep the old object reference for quick access, e.g.\n        // `node.data.barRefs.precision`\n        node.data.barRefs = {};\n        for (var _i = 0, _len = keys.length; _i < _len; _i++) {\n          node.data.barRefs[keys[_i]] = Math.max(Math.min(node.data.bars[keys[_i]], 1), 0);\n          bars.push({\n            barId: node.id + '.' + keys[_i],\n            id: keys[_i],\n            value: node.data.barRefs[keys[_i]]\n          });\n        }\n        node.data.bars = bars;\n      }\n    }\n  }\n\n  /**\n   * Process outgoing links and add them to the source\n   *\n   * @author  Fritz Lekschas\n   * @date    2015-11-17\n   *\n   * @method  processLink\n   * @private\n   * @memberOf  traverseGraph\n   * @param  {Object}  source  Source node.\n   * @param  {Object}  target  Target node.\n   */\n  function processLink(source, target) {\n    var id = '(' + source.id + ')->(' + target.id + ')';\n\n    links[id] = {\n      id: id,\n      source: {\n        node: source,\n        offsetX: 0,\n        offsetY: 0\n      },\n      target: {\n        node: target,\n        offsetX: 0,\n        offsetY: 0\n      }\n    };\n\n    source.links.outgoing.refs.push(links[id]);\n    target.links.incoming.refs.push(links[id]);\n\n    source.links.outgoing.total++;\n    target.links.incoming.total++;\n  }\n\n  /**\n   * Process a node, e.g. assign `x` and `y`, clone node etc.\n   *\n   * @description\n   * Nodes are edited in place.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-13\n   *\n   * @method  processNode\n   * @private\n   * @memberOf  traverseGraph\n   * @param  {String}  id  Node ID.\n   * @param  {Object}  node  Node to be processed.\n   * @param  {Object}  parent  Parent node.\n   * @param  {Boolean}  duplication  If `true` node needs to be duplicated or\n   *   cloned.\n   */\n  function processNode(id, node, parent, duplication) {\n    var _id = id.toString();\n    var _node = node;\n    var skip = false;\n\n    if (duplication) {\n      // Check if there is already another clone on the same level. If so, skip\n      // creating a new clone. The rationale is to have only one clone per\n      // level.\n      for (var i = node.clones.length; i--;) {\n        if (node.clones[i].depth === parent.depth + 1) {\n          skip = true;\n          _id = node.clones[i].cloneId;\n          _node = node.clones[i];\n          break;\n        }\n      }\n\n      // Clone node only when the parent is **not** just one level before the\n      // clone because then the parent can simple link to the _original node_.\n      if (parent.depth + 1 !== node.depth && !skip) {\n        var cloneId = id + '.' + (node.clones.length + 1);\n        graph[cloneId] = {\n          children: [],\n          clone: true,\n          cloneId: cloneId,\n          cloneNum: node.clones.length + 1,\n          // Data will be referenced rather than copied to avoid inconsistencies\n          data: node.data,\n          originalId: id.toString(),\n          // Reference to the original node\n          originalNode: node\n        };\n        _id = cloneId;\n        _node = graph[cloneId];\n        // Add a reference to the original node that points to the clone.\n        node.clones.push(_node);\n        // Remove parent\n        node.parents[parent.id] = undefined;\n        delete node.parents[parent.id];\n      }\n    } else {\n      _node.clones = [];\n    }\n\n    _node.id = _id;\n\n    if (!_node.parents) {\n      _node.parents = {};\n    }\n    if (parent) {\n      _node.parents[parent.id] = parent;\n    } else {\n      _node.parents = {};\n    }\n\n    if (!_node.data.state) {\n      _node.data.state = {};\n    }\n\n    if (!_node.childRefs) {\n      _node.childRefs = [];\n    }\n\n    if (parent) {\n      _node.depth = parent.depth + 1;\n      parent.childRefs.push(_node);\n    } else {\n      _node.depth = 0;\n    }\n\n    if (!_node.links) {\n      _node.links = {\n        incoming: {\n          refs: [],\n          above: 0,\n          below: 0,\n          total: 0\n        },\n        outgoing: {\n          refs: [],\n          above: 0,\n          below: 0,\n          total: 0\n        }\n      };\n    }\n\n    if (!columnCache[_node.depth]) {\n      columnCache[_node.depth] = {};\n      nodeOrder[_node.depth] = [];\n    }\n\n    if (!columnCache[_node.depth][_id]) {\n      columnCache[_node.depth][_id] = true;\n      nodeOrder[_node.depth].push(_node);\n      _node.x = scale.x(_node.depth);\n      _node.y = scale.y(Object.keys(columnCache[_node.depth]).length - 1);\n    }\n\n    processBars(_node);\n\n    if (parent) {\n      processLink(parent, _node);\n    }\n  }\n\n  function addSiblings() {\n    for (var i = starts.length; i--;) {\n      for (var j = starts.length; j--;) {\n        if (i !== j) {\n          if (!graph[starts[i]].siblings) {\n            graph[starts[i]].siblings = {};\n          }\n          graph[starts[i]].siblings[starts[j]] = graph[starts[j]];\n        }\n      }\n    }\n  }\n\n  // BFS for each start node.\n  for (var i = starts.length; i--;) {\n    if (!graph[starts[i]]) {\n      return;\n    }\n\n    processNode(starts[i], graph[starts[i]]);\n\n    queue.push(starts[i]);\n    visited[starts[i]] = true;\n\n    while (queue.length > 0) {\n      var node = graph[queue.shift()];\n\n      for (var j = node.children.length; j--;) {\n        var childId = node.children[j];\n        var child = graph[childId];\n\n        if (child) {\n          var clone = true;\n\n          if (!visited[childId]) {\n            queue.push(childId);\n            visited[childId] = true;\n            clone = false;\n          }\n\n          processNode(childId, child, node, clone);\n        }\n      }\n    }\n  }\n\n  addSiblings();\n}\n\n// External\n// eslint-disable-line import/no-unresolved\n// Internal\n// Private variables\nvar _d3 = d3;\nvar _cellRelInnerPadding = CELL_REL_INNER_PADDING;\nvar _grid = {\n  columns: GRID.columns,\n  rows: GRID.rows\n};\nvar _size = {\n  width: SIZE.width,\n  height: SIZE.height\n};\nvar _links = {};\n\nvar _colRelPadding = COL_REL_PADDING;\nvar _rowRelPadding = ROW_REL_PADDING;\nvar _columnWidth = void 0;\nvar _rowHeight = void 0;\nvar _colAbsPadding = void 0;\nvar _colAbsContentWidth = void 0;\nvar _rowAbsPadding = void 0;\nvar _rowAbsContentHeight = void 0;\nvar _cellAbsInnerPadding = void 0;\n\nvar ListGraphLayout = function () {\n  /**\n   * ListGraph class constructor.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-10\n   *\n   * @constructor\n   * @param  {Array|Object}  size  New size. Can either be an Array, e.g.\n   *   `[200,20]` or an Object, e.g. `{width: 200, height: 20}`.\n   * @param  {Array|Object}  grid  New grid configuration. Can either be an\n   *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n   * @param  {Object}  specificD3  Provide a specific version of D3.js.\n   */\n  function ListGraphLayout(size, grid, specificD3) {\n    classCallCheck(this, ListGraphLayout);\n\n    if (specificD3) {\n      _d3 = specificD3;\n    }\n\n    if (_d3.version[0] !== '4') {\n      throw new D3VersionFourRequired(_d3.version);\n    }\n\n    this.scale = {\n      x: _d3.scaleLinear(),\n      y: _d3.scaleLinear(),\n      linkPosition: {}\n    };\n\n    this.grid(grid);\n    this.size(size);\n\n    this.columnCache = {};\n    this.columns = {};\n    this.columnNodeOrder = {};\n    this.columnSorting = {};\n  }\n\n  /**\n   * Convert an object-based list of nodes into an array of arrays of nodes.\n   *\n   * @description\n   * Representing a graph using hierarchical data structures such as an Array is\n   * difficult. To save resources and avoid complex structures a graph is\n   * represented as a simple list of nodes. The list correspondes to an objects\n   * where the object's keys stand for node identifiers. This ensures uniqueness\n   * but has the disadvantage that D3 doesn't know what to do with it, thus we\n   * have to convert that structure into a fat array of array of nodes. It's\n   * important to notice that the nodes are *not* cloned into the array but\n   * instead simply linked using references.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-12-04\n   *\n   * @method  nodesToMatrix\n   * @memberOf  ListGraph\n   * @public\n   * @param  {Integer}  Level for which nodes should be returned.\n   * @return  {Array}  Fat array of arrays of nodes.\n   */\n\n\n  createClass(ListGraphLayout, [{\n    key: 'nodesToMatrix',\n    value: function nodesToMatrix(level) {\n      var arr = [];\n\n      var start = 0;\n      var end = Object.keys(this.columnCache).length;\n\n      if (isFinite(level)) {\n        start = level;\n        end = level + 1;\n      }\n\n      for (var i = start; i < end; i++) {\n        arr.push({\n          y: 0,\n          x: this.scale.x(i),\n          level: i,\n          rows: [],\n          sortBy: this.columnSorting[i].by,\n          sortOrder: this.columnSorting[i].order\n        });\n        var keys = Object.keys(this.columnCache[i]);\n        for (var j = keys.length; j--;) {\n          arr[i - start].rows.push(this.data[keys[j]]);\n        }\n      }\n\n      return arr;\n    }\n\n    /**\n     * Process original data and return an D3 ready Array.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-12-28\n     *\n     * @method  process\n     * @memberOf  ListGraph\n     * @public\n     * @category  Data\n     * @param  {Object}  data  Object list of nodes.\n     * @param  {Array}  rootIds  Array of node IDs to start traversal.\n     * @param  {Object}  options  Object holding extra options such as sorting.\n     * @return  {Array}  Array of Array of nodes.\n     */\n\n  }, {\n    key: 'process',\n    value: function process(data, rootIds, options) {\n      this.data = data || this.data;\n      this.rootIds = rootIds || this.rootIds;\n\n      if (!isArray(this.rootIds)) {\n        if (isFinite(this.rootIds)) {\n          this.rootIds = [this.rootIds];\n        } else {\n          throw new NoRootNodes('No root node IDs specified.');\n        }\n      }\n\n      var _options = assign({}, options);\n\n      traverseGraph(this.data, this.rootIds, this.columnCache, this.columnNodeOrder, this.scale, _links);\n\n      for (var i = Object.keys(this.columnCache).length; i--;) {\n        this.columnSorting[i] = {};\n      }\n\n      if (_options.sortBy) {\n        this.sort(undefined, options.sortBy, options.sortOrder || 'desc');\n      }\n\n      return {\n        global: this.compileGlobalProps(),\n        nodes: this.nodesToMatrix()\n      };\n    }\n\n    /**\n     * Sorts nodes of all or a specific level according to a property and order.\n     *\n     * @description\n     * Currently nodes can only be sorted by _precision_, _recall_ or by name.\n     *\n     * @method  sort\n     * @author  Fritz Lekschas\n     * @date    2015-12-04\n     * @param  {Integer}  level  Specifies the level which should be sorted.\n     * @param  {String}  property   The property used for sorting. Can be one of\n     *   ['precision', 'recall', 'name'].\n     * @param  {Integer}  sortOrder  If `1` sort asc. If `-1` sort desc.\n     * @return  {Object}  Self.\n     */\n\n  }, {\n    key: 'sort',\n    value: function sort(level, property, sortOrder) {\n      var itr = 0;\n      var end = Object.keys(this.columnCache).length;\n      var getValue = void 0;\n      var sortProperty = void 0;\n\n      // 1 = asc, -1 = desc [default]\n      var numericSortOrder = sortOrder === 1 ? 1 : -1;\n\n      switch (property) {\n        case 'precision':\n          sortProperty = 'precision';\n          getValue = function getValue(obj) {\n            return obj.data.barRefs.precision;\n          };\n          break;\n        case 'recall':\n          sortProperty = 'recall';\n          getValue = function getValue(obj) {\n            return obj.data.barRefs.recall;\n          };\n          break;\n        default:\n          getValue = function getValue(obj) {\n            return obj.data.name.toLowerCase();\n          };\n          sortProperty = 'name';\n          break;\n      }\n\n      if (isFinite(level)) {\n        itr = level;\n        end = level + 1;\n      }\n\n      for (itr; itr < end; itr++) {\n        this.columnNodeOrder[itr].sort(function (a, b) {\n          // eslint-disable-line no-loop-func\n          var valueA = getValue(a);\n          var valueB = getValue(b);\n\n          if (valueA > valueB) {\n            return numericSortOrder;\n          }\n          if (valueA < valueB) {\n            return -numericSortOrder;\n          }\n          return 0;\n        });\n\n        this.columnSorting[itr].by = sortProperty;\n        this.columnSorting[itr].order = numericSortOrder;\n\n        // Update `y` according to the new position.\n        for (var i = this.columnNodeOrder[itr].length; i--;) {\n          this.columnNodeOrder[itr][i].y = this.scale.y(i);\n        }\n      }\n\n      return this;\n    }\n\n    /**\n     * Compiles an object of global properties of the visualization.\n     *\n     * @description\n     * Global properties comprise all properties that can be applied to globally\n     * across the visualization such as the width and padding of columns or the\n     * height and padding of rows.\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-17\n     *\n     * @method  compileGlobalProps\n     * @memberOf  ListGraph\n     * @public\n     * @category  Data\n     * @return  {Object}  Object with global properties.\n     */\n\n  }, {\n    key: 'compileGlobalProps',\n    value: function compileGlobalProps() {\n      return {\n        column: {\n          width: _columnWidth,\n          height: _size.height,\n          padding: _colAbsPadding,\n          contentWidth: _colAbsContentWidth\n        },\n        row: {\n          height: _rowHeight,\n          padding: _rowAbsPadding,\n          contentHeight: _rowAbsContentHeight\n        },\n        cell: {\n          padding: _cellAbsInnerPadding\n        }\n      };\n    }\n\n    /**\n     * Returns the processed nodes as an Array of Array of nodes.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-16\n     *\n     * @method  nodes\n     * @memberOf  ListGraph\n     * @public\n     * @category  Data\n     * @param  {Integer}  Level for which nodes should be returned.\n     * @return  {Array}  Array of Array of nodes.\n     */\n\n  }, {\n    key: 'nodes',\n    value: function nodes(level) {\n      return this.nodesToMatrix(level);\n    }\n\n    /**\n     * Returns an array of outgoing links per level, i.e. column, or all outgoing\n     * links.\n     *\n     * @description\n     * The column ID and level might be the same for small graphs but it's\n     * possible that the first column does not represent the first level.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-12-04\n     *\n     * @method  links\n     * @memberOf  ListGraph\n     * @public\n     * @category  Data\n     * @param  {Integer}  startLevel  Start level for returning links. If `to` is\n     *   not specified that only links from `start` level are returned.\n     * @param  {Integer}  endLevel  End level for returning links. So all links\n     *   from `start` to `to` (including) will be returned\n     * @return  {Array}  Array of objects containing the information for outgoing\n     *   links.\n     */\n\n  }, {\n    key: 'links',\n    value: function links(startLevel, endLevel) {\n      var allLinks = [];\n\n      var keys = [];\n\n      if (!isFinite(startLevel)) {\n        keys = Object.keys(this.data);\n      } else {\n        var normStartLevel = Math.max(startLevel, 0);\n        var normEndLevel = isFinite(endLevel) ? Math.min(endLevel, Object.keys(this.columnCache).length) : normStartLevel + 1;\n\n        for (var i = normStartLevel; i < normEndLevel; i++) {\n          keys = keys.concat(Object.keys(this.columnCache[i]));\n        }\n      }\n\n      for (var _i = keys.length; _i--;) {\n        if (this.data[keys[_i]].links) {\n          allLinks = allLinks.concat(this.data[keys[_i]].links.outgoing.refs);\n        }\n      }\n\n      return allLinks;\n    }\n\n    /**\n     * Offset one end of all links per level vertically.\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-18\n     *\n     * @method  offsetLinks\n     * @memberOf  ListGraph\n     * @public\n     * @category  Links\n     * @param  {Integer}  level  If given get's only links of a certain level. The\n     *   level of a node is relative to the length of the shortest path to the\n     *   root node.\n     * @param  {Number}  offsetY  The amount that one end of the link should be\n     *   offset vertically.\n     * @param  {String}  nodeType  Defines which end of the link should be\n     *   shifted. This can either be `source` or `traget`.\n     * @return  {Array}  Array of objects containing the information of the\n     *   modified outgoing links.\n     */\n\n  }, {\n    key: 'offsetLinks',\n    value: function offsetLinks(level, offsetY, nodeType) {\n      var links = this.links(level);\n\n      if ((nodeType === 'source' || nodeType === 'target') && isFinite(offsetY)) {\n        for (var i = links.length; i--;) {\n          links[i][nodeType].offsetY = offsetY;\n        }\n      }\n\n      return links;\n    }\n\n    /**\n     * Set or get the grid configuration.\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-10\n     *\n     * @method  grid\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @category  Data\n     * @param  {Array|Object}  newGrid  New grid configuration. Can either be an\n     *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n     * @return  {Object}  Self.\n     */\n\n  }, {\n    key: 'grid',\n    value: function grid(newGrid) {\n      if (!newGrid) {\n        return _grid;\n      }\n\n      if (isArray(newGrid)) {\n        _grid.columns = parseInt(newGrid[0], 10) || _grid.columns;\n        _grid.rows = parseInt(newGrid[1], 10) || _grid.rows;\n        this.updateScaling();\n      }\n\n      if (isObject(newGrid)) {\n        _grid.columns = parseInt(newGrid.columns, 10) || _grid.columns;\n        _grid.rows = parseInt(newGrid.rows, 10) || _grid.rows;\n        this.updateScaling();\n      }\n\n      return this;\n    }\n  }, {\n    key: 'updateBars',\n    value: function updateBars(graph) {\n      var nodesId = Object.keys(graph);\n      var barsData = [];\n\n      for (var i = nodesId.length; i--;) {\n        for (var j = graph[nodesId[i]].data.bars.length; j--;) {\n          barsData.push({\n            barId: nodesId[i] + '.' + graph[nodesId[i]].data.bars[j].id,\n            id: graph[nodesId[i]].data.bars[j].id,\n            value: graph[nodesId[i]].data.bars[j].value\n          });\n        }\n      }\n\n      return barsData;\n    }\n\n    /**\n     * Update vertical position when filtering, i.e. hiding, nodes.\n     *\n     * @method  updateNodeVisibility\n     * @author  Fritz Lekschas\n     * @date    2016-01-17\n     */\n\n  }, {\n    key: 'updateNodesVisibility',\n    value: function updateNodesVisibility() {\n      var skipped = void 0;\n\n      for (var i = Object.keys(this.columnCache).length; i--;) {\n        skipped = 0;\n        // Update `y` according to the number of previously skipped nodes.\n        for (var j = 0, len = this.columnNodeOrder[i].length; j < len; j++) {\n          if (this.columnNodeOrder[i][j].hidden && !this.columnNodeOrder[i][j].data.queryMode) {\n            skipped++;\n          }\n          this.columnNodeOrder[i][j].y = this.scale.y(j - skipped);\n        }\n      }\n\n      return this;\n    }\n\n    /**\n     * Updates scaling according to the size and grid configuration.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @method  updateScaling\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @return  {Object}  Self.\n     */\n\n  }, {\n    key: 'updateScaling',\n    value: function updateScaling() {\n      this.scale.x.domain([0, _grid.columns]).range([0, _size.width]);\n      this.scale.y.domain([0, _grid.rows]).range([0, _size.height]);\n\n      _columnWidth = _size.width / _grid.columns;\n      _rowHeight = _size.height / _grid.rows;\n\n      _colAbsPadding = _columnWidth * _colRelPadding;\n      _colAbsContentWidth = _columnWidth * (1 - 2 * _colRelPadding);\n\n      _rowAbsPadding = Math.max(_rowHeight * _rowRelPadding, 2);\n      _rowAbsContentHeight = _rowHeight - 2 * _rowAbsPadding;\n\n      _cellAbsInnerPadding = _cellRelInnerPadding * Math.min(_colAbsContentWidth, _rowAbsContentHeight, 1);\n\n      return this;\n    }\n\n    /**\n     * Set or get the size of the layout.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @method  size\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @param  {Array|Object}  newSize  New size. Can either be an Array, e.g.\n     *   `[200, 20]` or an Object, e.g. `{width: 200, height: 20}`.\n     * @return  {Object}  Self.\n     */\n\n  }, {\n    key: 'size',\n    value: function size(newSize) {\n      if (!newSize) {\n        return _size;\n      }\n\n      if (isArray(newSize)) {\n        _size.width = parseInt(newSize[0], 10) || _size.width;\n        _size.height = parseInt(newSize[1], 10) || _size.height;\n        this.updateScaling();\n      }\n\n      if (isObject(newSize)) {\n        _size.width = parseInt(newSize.width, 10) || _size.width;\n        _size.height = parseInt(newSize.height, 10) || _size.height;\n        this.updateScaling();\n      }\n\n      return this;\n    }\n\n    /**\n     * Set or get the relative width of the content area of a node.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-17\n     *\n     * @method  columnPadding\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @param  {Number}  padding  Number in [0.1, 0.66].\n     * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n     *   absolute number. Otherwise a relative number is assumed.\n     * @return  {Number|Object}  When `padding` is passed `this` will be returned\n     *   for chaining. Otherwise the current padding of columns will be returned.\n     */\n\n  }, {\n    key: 'columnPadding',\n    value: function columnPadding(padding, absolute) {\n      if (!padding) {\n        return _colRelPadding;\n      }\n\n      if (isFinite(padding)) {\n        var relPadding = padding;\n        if (absolute && isFinite(_columnWidth)) {\n          relPadding = padding / _columnWidth;\n        }\n        _colRelPadding = Math.max(Math.min(relPadding, 0.66), 0.1);\n        this.updateScaling();\n      }\n\n      return this;\n    }\n\n    /**\n     * Set or get the relative width of the content area of a node.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-17\n     *\n     * @method  rowPadding\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @param  {Number}  padding  Number in [0, 0.5].\n     * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n     *   absolute number. Otherwise a relative number is assumed.\n     * @return  {Number|Object}  When `padding` is passed `this` will be returned\n     *   for chaining. Otherwise the current padding of rows will be returned.\n     */\n\n  }, {\n    key: 'rowPadding',\n    value: function rowPadding(padding, absolute) {\n      if (!padding) {\n        return _rowRelPadding;\n      }\n\n      if (isFinite(padding)) {\n        var relPadding = padding;\n        if (absolute && isFinite(_rowHeight)) {\n          relPadding = padding / _rowHeight;\n        }\n        _rowRelPadding = Math.max(Math.min(relPadding, 0.5), 0);\n        this.updateScaling();\n      }\n\n      return this;\n    }\n  }]);\n  return ListGraphLayout;\n}();\n\nexports.listGraph = ListGraphLayout;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));"],"sourceRoot":"/source/"}