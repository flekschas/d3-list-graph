{"version":3,"sources":["d3.listGraph.min.js"],"names":["global","factory","exports","module","require","define","amd","d3","this","isFinite","value","nativeIsFinite","isObject","type","baseAssignValue","object","key","defineProperty","configurable","enumerable","writable","eq","other","assignValue","objValue","hasOwnProperty$1","call","undefined","copyObject","source","props","customizer","isNew","index","length","newValue","identity","apply","func","thisArg","args","overRest","start","transform","nativeMax","arguments","array","Array","otherArgs","constant","isFunction","tag","objectToString","funcTag","genTag","isMasked","maskSrcKey","toSource","funcToString$1","e","baseIsNative","pattern","reIsNative","reIsHostCtor","test","getValue","getNative","shortOut","count","lastCalled","stamp","nativeNow","remaining","HOT_SPAN","HOT_COUNT","baseRest","setToString","isLength","MAX_SAFE_INTEGER","isArrayLike","isIndex","MAX_SAFE_INTEGER$1","reIsUint","isIterateeCall","createAssigner","assigner","sources","guard","Object","isPrototype","Ctor","constructor","proto","prototype","objectProto$4","baseTimes","n","iteratee","result","isObjectLike","isArrayLikeObject","isArguments","hasOwnProperty$4","propertyIsEnumerable","objectToString$1","argsTag","arrayLikeKeys","inherited","isArray","String","skipIndexes","hasOwnProperty$3","push","overArg","arg","baseKeys","nativeKeys","hasOwnProperty$5","keys","traverseGraph","graph","starts","columnCache","nodeOrder","scale","links","processBars","node","data","bars","barRefs","i","len","Math","max","min","barId","id","_i","_len","processLink","target","offsetX","offsetY","outgoing","refs","incoming","total","processNode","parent","duplication","_id","toString","_node","skip","clones","depth","cloneId","children","clone","cloneNum","originalId","originalNode","parents","state","childRefs","above","below","x","y","addSiblings","j","siblings","visited","queue","shift","childId","child","setOption","defaultValue","noFalsyValue","freeGlobal","freeSelf","self","root","Function","objectProto$1","hasOwnProperty","objectProto$3","coreJsData","uid","exec","IE_PROTO","funcProto$1","reRegExpChar","funcProto","objectProto$2","funcToString","hasOwnProperty$2","RegExp","replace","nativeDefineProperty","baseSetToString","string","Date","now","objectProto$6","objectProto$5","objectProto$7","objectProto","assign","SIZE","width","height","GRID","columns","rows","COL_REL_PADDING","ROW_REL_PADDING","NODE_REL_INNER_PADDING","classCallCheck","AwaitValue","AsyncGenerator","gen","send","Promise","resolve","reject","request","next","back","front","resume","then","settle","done","err","_invoke","return","Symbol","asyncIterator","throw","wrap","fn","await","instance","Constructor","TypeError","createClass","defineProperties","descriptor","protoProps","staticProps","inherits","subClass","superClass","create","setPrototypeOf","__proto__","possibleConstructorReturn","ReferenceError","ExtendableError","_Error","message","_this","getPrototypeOf","name","Error","captureStackTrace","D3VersionFourRequired","_ExtendableError","versionFound","NoObject","_ExtendableError2","variableName","NoRootNodes","_grid","_size","_links","_d3","_nodeRelInnerPadding","_colRelPadding","_rowRelPadding","_columnWidth","_rowHeight","_colAbsPadding","_colAbsContentWidth","_rowAbsPadding","_rowAbsContentHeight","_cellAbsInnerPadding","ListGraphLayout","options","specificD3","version","scaleLinear","linkPosition","innerNodePadding","columnPadding","rowPadding","grid","size","columnNodeOrder","columnSorting","compileGlobalProps","nodes","nodesToMatrix","level","arr","end","sortBy","by","sortOrder","order","rootIds","_options","sort","getData","property","itr","sortProperty","numericSortOrder","obj","precision","recall","toLowerCase","a","b","valueA","valueB","startLevel","endLevel","allLinks","normStartLevel","normEndLevel","concat","nodeType","newGrid","parseInt","updateScaling","skipped","hidden","queryMode","domain","range","newSize","padding","absolute","relPadding","column","contentWidth","row","contentHeight","cell","nodesId","barsData","listGraph"],"mappings":"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","file":"d3.listGraph.min.js","sourcesContent":["/* Copyright Fritz Lekschas: D3 layout for list-like graphs */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3'], factory) :\n  (factory((global.d3 = global.d3 || {}),global.d3));\n}(this, (function (exports,d3) { 'use strict';\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite;\n\n/**\n * Checks if `value` is a finite primitive number.\n *\n * **Note:** This method is based on\n * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n * @example\n *\n * _.isFinite(3);\n * // => true\n *\n * _.isFinite(Number.MIN_VALUE);\n * // => true\n *\n * _.isFinite(Infinity);\n * // => false\n *\n * _.isFinite('3');\n * // => false\n */\nfunction isFinite(value) {\n  return typeof value == 'number' && nativeIsFinite(value);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/** Built-in value references. */\nvar defineProperty = Object.defineProperty;\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty$1.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto$3 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto$3.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/** Used for built-in method references. */\nvar funcProto$1 = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString$1 = funcProto$1.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString$1.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype;\nvar objectProto$2 = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$2.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty$2).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/* Built-in method references that are verified to be native. */\nvar nativeDefineProperty = getNative(Object, 'defineProperty');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !nativeDefineProperty ? identity : function(func, string) {\n  return nativeDefineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 500;\nvar HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$4;\n\n  return value === proto;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/** Used for built-in method references. */\nvar objectProto$6 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$4 = objectProto$6.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$1 = objectProto$6.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto$6.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty$4.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString$1.call(value) == argsTag);\n}\n\n/** Used for built-in method references. */\nvar objectProto$5 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$5.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$3.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/** Used for built-in method references. */\nvar objectProto$7 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$5 = objectProto$7.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty$5.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\n/**\n * Default size\n *\n * @constant\n * @default\n * @type  {Object}\n */\nvar SIZE = {\n  width: 300,\n  height: 300\n};\n\n/**\n * Default grid\n *\n * @constant\n * @default\n * @type  {Object}\n */\nvar GRID = {\n  columns: 3,\n  rows: 3\n};\n\n/**\n * Default relative padding of columns.\n *\n * @description\n * Padding between columns refers to the left and right inner padding used\n * for links between items in the column. Padding is relative to the overall\n * width of the column.\n *\n * @constant\n * @default\n * @type  {Number}\n */\nvar COL_REL_PADDING = 0.2;\n\n/**\n * Default relative padding of rows.\n *\n * @description\n * Padding between rows refers to the top and bottom inner padding used to\n * separate items vertically in the column. Padding is relative to the overall\n * height of the row.\n *\n * @constant\n * @default\n * @type  {Number}\n */\nvar ROW_REL_PADDING = 0.05;\n\n/**\n * Default inner padding of a cell relative to the shorter dimension, e.g.\n * width or height.\n *\n * @type  {Number}\n */\nvar NODE_REL_INNER_PADDING = 0.05;\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n\nvar set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\n/**\n * Base error class.\n */\nvar ExtendableError = function (_Error) {\n  inherits(ExtendableError, _Error);\n\n  /**\n   * Constructor.\n   *\n   * @method  constructor\n   * @author  Fritz Lekschas\n   * @date    2016-09-12\n   * @param   {String}  message  Custom error message.\n   */\n  function ExtendableError(message) {\n    classCallCheck(this, ExtendableError);\n\n    var _this = possibleConstructorReturn(this, (ExtendableError.__proto__ || Object.getPrototypeOf(ExtendableError)).call(this, message));\n\n    _this.name = _this.constructor.name;\n    _this.message = message;\n    Error.captureStackTrace(_this, _this.constructor.name);\n    return _this;\n  }\n\n  return ExtendableError;\n}(Error);\n\n/**\n * D3 version 4 not found error.\n */\nvar D3VersionFourRequired = function (_ExtendableError) {\n  inherits(D3VersionFourRequired, _ExtendableError);\n\n  /**\n   * Constructor\n   *\n   * @method  constructor\n   * @author  Fritz Lekschas\n   * @date    2016-09-12\n   * @param   {String}  versionFound  D3 version string.\n   */\n  function D3VersionFourRequired(versionFound) {\n    classCallCheck(this, D3VersionFourRequired);\n    return possibleConstructorReturn(this, (D3VersionFourRequired.__proto__ || Object.getPrototypeOf(D3VersionFourRequired)).call(this, 'D3 version 4 is required to run the code. Found version ' + versionFound));\n  }\n\n  return D3VersionFourRequired;\n}(ExtendableError);\n\n/**\n * When varible is no object\n */\nvar NoObject = function (_ExtendableError2) {\n  inherits(NoObject, _ExtendableError2);\n\n  /**\n   * Constructor\n   *\n   * @method  constructor\n   * @author  Fritz Lekschas\n   * @date    2016-09-12\n   * @param   {String}  variableName  Name of the variable that ought to be an\n   *   object.\n   */\n  function NoObject(variableName) {\n    classCallCheck(this, NoObject);\n    return possibleConstructorReturn(this, (NoObject.__proto__ || Object.getPrototypeOf(NoObject)).call(this, 'The \"' + variableName + '\" must be an object.'));\n  }\n\n  return NoObject;\n}(ExtendableError);\n\n/**\n * Error class when no root ID is given.\n */\nvar NoRootNodes = function (_ExtendableError) {\n  inherits(NoRootNodes, _ExtendableError);\n\n  function NoRootNodes(message) {\n    classCallCheck(this, NoRootNodes);\n    return possibleConstructorReturn(this, (NoRootNodes.__proto__ || Object.getPrototypeOf(NoRootNodes)).call(this, message || 'No root node IDs specified.'));\n  }\n\n  return NoRootNodes;\n}(ExtendableError);\n\n// External\n/**\n * Traverse graph in a breadth-first search fashion and process nodes along\n * the traversal.\n *\n * @author  Fritz Lekschas\n * @date  2015-11-13\n *\n * @private\n * @method  traverseGraph\n * @param  {Object}  graph  Graph to be traversed\n * @param  {Array}  starts  Array of node IDs for start the traversal.\n * @param  {Object}  columnCache  Cache storing node IDs per column.\n * @param  {Object}  scale  D3 linear scale functions for the\n *    x-axis (columns), y-axis (rows) and other stuff.\n * œparam  {Object}  links  Object storing links data.\n */\nfunction traverseGraph(graph, starts, columnCache, nodeOrder, scale, links) {\n  var visited = {};\n  var queue = [];\n\n  /**\n   * Ensure that the bar values are in [0,1] and that the structure of `bars`\n   * is unified.\n   *\n   * @description\n   * Each node can feature a number of bars representing some value. The layout\n   * can handle two structure, an object-based and an array-based structure.\n   *\n   * Object-based model:\n   * ```\n   * {\n   *   children: [...],\n   *   data: {\n   *     \"name\": \"whatever\",\n   *     \"bars\": {\n   *       \"propertyA\": 0.9,\n   *       \"propertyB\": 0.5\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Array-based model:\n   * ```\n   * {\n   *   children: [...],\n   *   data: {\n   *     \"name\": \"whatever\",\n   *     \"bars\": [{\n   *         \"id\": \"propertyA\",\n   *         \"value\": 0.9\n   *       }, {\n   *         \"id\": \"propertyB\",\n   *         \"value\": 0.5\n   *       }\n   *     ]\n   *   }\n   * }\n   * ```\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-18\n   *\n   * @method  processBars\n   * @private\n   * @memberOf  traverseGraph\n   * @param  {Object}  node  Node to be processed.\n   */\n  function processBars(node) {\n    if (node.data.bars) {\n      if (isArray(node.data.bars)) {\n        node.data.barRefs = {};\n        for (var i = 0, len = node.data.bars.length; i < len; i++) {\n          node.data.bars[i].value = Math.max(Math.min(node.data.bars[i].value, 1), 0);\n          node.data.bars[i].barId = node.id + '.' + node.data.bars[i].id;\n          node.data.barRefs[node.data.bars[i].id] = node.data.bars[i].value;\n        }\n      } else if (isObject(node.data.bars)) {\n        var bars = [];\n        var keys = Object.keys(node.data.bars);\n        // Keep the old object reference for quick access, e.g.\n        // `node.data.barRefs.precision`\n        node.data.barRefs = {};\n        for (var _i = 0, _len = keys.length; _i < _len; _i++) {\n          node.data.barRefs[keys[_i]] = Math.max(Math.min(node.data.bars[keys[_i]], 1), 0);\n          bars.push({\n            barId: node.id + '.' + keys[_i],\n            id: keys[_i],\n            value: node.data.barRefs[keys[_i]]\n          });\n        }\n        node.data.bars = bars;\n      }\n    }\n  }\n\n  /**\n   * Process outgoing links and add them to the source\n   *\n   * @author  Fritz Lekschas\n   * @date    2015-11-17\n   *\n   * @method  processLink\n   * @private\n   * @memberOf  traverseGraph\n   * @param  {Object}  source  Source node.\n   * @param  {Object}  target  Target node.\n   */\n  function processLink(source, target) {\n    var id = '(' + source.id + ')->(' + target.id + ')';\n\n    if (!links[id]) {\n      links[id] = {\n        id: id,\n        source: {\n          node: source,\n          offsetX: 0,\n          offsetY: 0\n        },\n        target: {\n          node: target,\n          offsetX: 0,\n          offsetY: 0\n        }\n      };\n\n      source.links.outgoing.refs.push(links[id]);\n      target.links.incoming.refs.push(links[id]);\n\n      source.links.outgoing.total++;\n      target.links.incoming.total++;\n    }\n  }\n\n  /**\n   * Process a node, e.g. assign `x` and `y`, clone node etc.\n   *\n   * @description\n   * Nodes are edited in place.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-13\n   *\n   * @method  processNode\n   * @private\n   * @memberOf  traverseGraph\n   * @param  {String}  id  Node ID.\n   * @param  {Object}  node  Node to be processed.\n   * @param  {Object}  parent  Parent node.\n   * @param  {Boolean}  duplication  If `true` node needs to be duplicated or\n   *   cloned.\n   */\n  function processNode(id, node, parent, duplication) {\n    var _id = id.toString();\n    var _node = node;\n    var skip = false;\n\n    if (duplication) {\n      // Check if there is already another clone on the same level. If so, skip\n      // creating a new clone. The rationale is to have only one clone per\n      // level.\n      for (var i = node.clones.length; i--;) {\n        if (node.clones[i].depth === parent.depth + 1) {\n          skip = true;\n          _id = node.clones[i].cloneId;\n          _node = node.clones[i];\n          break;\n        }\n      }\n\n      // Clone node only when the parent is **not** just one level before the\n      // clone because then the parent can simple link to the _original node_.\n      if (parent.depth + 1 !== node.depth && !skip) {\n        var cloneId = id + '.' + (node.clones.length + 1);\n        if (!graph[cloneId]) {\n          graph[cloneId] = {\n            children: [],\n            clone: true,\n            cloneId: cloneId,\n            cloneNum: node.clones.length + 1,\n            // Data will be referenced rather than copied to avoid inconsistencies\n            data: node.data,\n            originalId: id.toString(),\n            // Reference to the original node\n            originalNode: node\n          };\n        }\n        _id = cloneId;\n        _node = graph[cloneId];\n        // Add a reference to the original node that points to the clone.\n        node.clones.push(_node);\n        // Remove parent\n        node.parents[parent.id] = undefined;\n        delete node.parents[parent.id];\n      }\n    } else {\n      _node.clones = [];\n    }\n\n    _node.id = _id;\n\n    if (!_node.parents) {\n      _node.parents = {};\n    }\n    if (parent) {\n      _node.parents[parent.id] = parent;\n    } else {\n      _node.parents = {};\n    }\n\n    if (!_node.data.state) {\n      _node.data.state = {};\n    }\n\n    if (!_node.childRefs) {\n      _node.childRefs = [];\n    }\n\n    if (parent) {\n      _node.depth = parent.depth + 1;\n      parent.childRefs.push(_node);\n    } else {\n      _node.depth = 0;\n    }\n\n    if (!_node.links) {\n      _node.links = {\n        incoming: {\n          refs: [],\n          above: 0,\n          below: 0,\n          total: 0\n        },\n        outgoing: {\n          refs: [],\n          above: 0,\n          below: 0,\n          total: 0\n        }\n      };\n    }\n\n    if (!columnCache[_node.depth]) {\n      columnCache[_node.depth] = {};\n      nodeOrder[_node.depth] = [];\n    }\n\n    if (!columnCache[_node.depth][_id]) {\n      columnCache[_node.depth][_id] = true;\n      nodeOrder[_node.depth].push(_node);\n      _node.x = scale.x(_node.depth);\n      _node.y = scale.y(Object.keys(columnCache[_node.depth]).length - 1);\n    }\n\n    processBars(_node);\n\n    if (parent) {\n      processLink(parent, _node);\n    }\n  }\n\n  function addSiblings() {\n    for (var i = starts.length; i--;) {\n      for (var j = starts.length; j--;) {\n        if (i !== j) {\n          if (!graph[starts[i]].siblings) {\n            graph[starts[i]].siblings = {};\n          }\n          graph[starts[i]].siblings[starts[j]] = graph[starts[j]];\n        }\n      }\n    }\n  }\n\n  // BFS for each start node.\n  for (var i = starts.length; i--;) {\n    if (!graph[starts[i]]) {\n      return;\n    }\n\n    processNode(starts[i], graph[starts[i]]);\n\n    queue.push(starts[i]);\n    visited[starts[i]] = true;\n\n    while (queue.length > 0) {\n      var node = graph[queue.shift()];\n\n      for (var j = node.children.length; j--;) {\n        var childId = node.children[j];\n        var child = graph[childId];\n\n        if (child) {\n          var clone = true;\n\n          if (!visited[childId]) {\n            queue.push(childId);\n            visited[childId] = true;\n            clone = false;\n          }\n\n          processNode(childId, child, node, clone);\n        }\n      }\n    }\n  }\n\n  addSiblings();\n}\n\n/**\n * Helper method to set a value if available and otherwise fall back to a\n * default value\n *\n * @method  setOption\n * @author  Fritz Lekschas\n * @date    2016-09-12\n * @param   {*}        value  Value to be set if available.\n * @param   {*}        defaultValue  Default value to be set when `value` is\n *   not available.\n * @param   {Boolean}  noFalsyValue  No falsy values are allowed. E.g., an empty\n *   string or the number zero are regarded as falsy.\n */\nfunction setOption(value, defaultValue, noFalsyValue) {\n  if (noFalsyValue) {\n    return value || defaultValue;\n  }\n\n  return typeof value !== 'undefined' ? value : defaultValue;\n}\n\n// External\n// Internal\n// Private variables\n\nvar _grid = {\n  columns: GRID.columns,\n  rows: GRID.rows\n};\n\nvar _size = {\n  width: SIZE.width,\n  height: SIZE.height\n};\n\nvar _links = {};\n\n/**\n * Holds the global or specified version of D3.js\n *\n * @type  {Object}\n */\nvar _d3 = d3;\n\n/**\n * Relative inner node padding.\n *\n * @type  {Float}\n */\nvar _nodeRelInnerPadding = void 0;\n\n/**\n * Relative inner column padding.\n *\n * @type  {Float}\n */\nvar _colRelPadding = void 0;\n\n/**\n * Relative inner row padding.\n *\n * @type  {Float}\n */\nvar _rowRelPadding = void 0;\n\n/**\n * Absolute column width.\n *\n * @type  {Float}\n */\nvar _columnWidth = void 0;\n\n/**\n * Absolute row height.\n *\n * @type  {Float}\n */\nvar _rowHeight = void 0;\n\n/**\n * Absolute column padding.\n *\n * @type  {Float}\n */\nvar _colAbsPadding = void 0;\n\n/**\n * Absolute width of a columns.\n *\n * @type  {Float}\n */\nvar _colAbsContentWidth = void 0;\n\n/**\n * Absolute row padding.\n *\n * @type  {Float}\n */\nvar _rowAbsPadding = void 0;\n\n/**\n * Absolute height of a row.\n *\n * @type  {Float}\n */\nvar _rowAbsContentHeight = void 0;\n\n/**\n * Absolute inner node padding .\n *\n * @type  {Float}\n */\nvar _cellAbsInnerPadding = void 0;\n\nvar ListGraphLayout = function () {\n  /**\n   * ListGraph class constructor.\n   *\n   * @example\n   * ```\n   * new d3.listGraph({\n   *   size: [\n   *     this.width,\n   *     this.height\n   *   ],\n   *   grid: [\n   *     this.columns,\n   *     this.rows\n   *   ],\n   *   d3: _d3,\n   *   nodeInnerPadding: 0,\n   *   rowPadding: 0,\n   *   columnPadding: 0.1\n   * });\n   * ```\n   *\n   * @description\n   * `option.size` can either be an Array, e.g., `[200,20]`, or an Object like\n   * `{width: 200, height: 20}`.\n   * `option.grid` Can either be an Array, e.g., `[5,3]`, or an Object like\n   * `{columns: 5, rows: 3}`.\n   * `options.d3` provides a specific version of D3.js or defaults back to the\n   * globally available version of d3.\n   * `options.innerNodePadding` specifies the relative inner padding of a node.\n   * `options.columnPadding` is the relative amount of the columns width to be\n   *   used as padding. E.g., `0.1` uses 10% as padding on the left and right\n   *   side of nodes.\n   * `options.rowPadding` specifies the relative padding per row. The ratio has\n   *   to related to at least 2 pixel.\n   *\n   * @author  Fritz Lekschas\n   * @date  2015-11-10\n   *\n   * @constructor\n   * @param  {Object}  options  Object holding all adjustable parameters.\n   *\n   * @param  {Array|Object}  size  New size. Can either be an Array, e.g.\n   *   `[200,20]` or an Object, e.g. `{width: 200, height: 20}`.\n   * @param  {Array|Object}  grid  New grid configuration. Can either be an\n   *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n   * @param  {Object}  specificD3  Provide a specific version of D3.js.\n   */\n  function ListGraphLayout(options) {\n    classCallCheck(this, ListGraphLayout);\n\n    if (!isObject(options)) {\n      throw new NoObject('options');\n    }\n\n    if (options.specificD3) {\n      if (isObject(options.specificD3)) {\n        _d3 = options.specificD3;\n      } else {\n        throw new NoObject('d3');\n      }\n    }\n\n    if (_d3.version[0] !== '4') {\n      throw new D3VersionFourRequired(_d3.version);\n    }\n\n    this.scale = {\n      x: _d3.scaleLinear(),\n      y: _d3.scaleLinear(),\n      linkPosition: {}\n    };\n\n    _nodeRelInnerPadding = setOption(options.innerNodePadding, NODE_REL_INNER_PADDING);\n\n    _colRelPadding = setOption(options.columnPadding, COL_REL_PADDING);\n\n    _rowRelPadding = setOption(options.rowPadding, ROW_REL_PADDING);\n\n    this.grid(options.grid);\n    this.size(options.size);\n\n    this.columnCache = {};\n    this.columns = {};\n    this.columnNodeOrder = {};\n    this.columnSorting = {};\n  }\n\n  /**\n   * Helper function to get the layout data\n   *\n   * @method  getData\n   * @author  Fritz Lekschas\n   * @date    2017-01-16\n   * @return  {Object}  Layout data\n   */\n\n\n  createClass(ListGraphLayout, [{\n    key: 'getData',\n    value: function getData() {\n      return {\n        global: ListGraphLayout.compileGlobalProps(),\n        nodes: this.nodesToMatrix()\n      };\n    }\n\n    /**\n     * Convert an object-based list of nodes into an array of arrays of nodes.\n     *\n     * @description\n     * Representing a graph using hierarchical data structures such as an Array is\n     * difficult. To save resources and avoid complex structures a graph is\n     * represented as a simple list of nodes. The list correspondes to an objects\n     * where the object's keys stand for node identifiers. This ensures uniqueness\n     * but has the disadvantage that D3 doesn't know what to do with it, thus we\n     * have to convert that structure into a fat array of array of nodes. It's\n     * important to notice that the nodes are *not* cloned into the array but\n     * instead simply linked using references.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-12-04\n     *\n     * @method  nodesToMatrix\n     * @memberOf  ListGraph\n     * @public\n     * @param  {Integer}  Level for which nodes should be returned.\n     * @return  {Array}  Fat array of arrays of nodes.\n     */\n\n  }, {\n    key: 'nodesToMatrix',\n    value: function nodesToMatrix(level) {\n      var arr = [];\n\n      var start = 0;\n      var end = Object.keys(this.columnCache).length;\n\n      if (isFinite(level)) {\n        start = level;\n        end = level + 1;\n      }\n\n      for (var i = start; i < end; i++) {\n        arr.push({\n          y: 0,\n          x: this.scale.x(i),\n          level: i,\n          rows: [],\n          sortBy: this.columnSorting[i].by,\n          sortOrder: this.columnSorting[i].order\n        });\n        var keys = Object.keys(this.columnCache[i]);\n        for (var j = keys.length; j--;) {\n          arr[i - start].rows.push(this.data[keys[j]]);\n        }\n      }\n\n      return arr;\n    }\n\n    /**\n     * Process original data and return an D3 ready Array.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-12-28\n     *\n     * @method  process\n     * @memberOf  ListGraph\n     * @public\n     * @category  Data\n     * @param  {Object}  data  Object list of nodes.\n     * @param  {Array}  rootIds  Array of node IDs to start traversal.\n     * @param  {Object}  options  Object holding extra options such as sorting.\n     * @return  {Array}  Array of Array of nodes.\n     */\n\n  }, {\n    key: 'process',\n    value: function process(data, rootIds, options) {\n      this.data = data || this.data;\n      this.rootIds = rootIds || this.rootIds;\n\n      // Make sure we start with a clean slate\n      this.columnCache = {};\n\n      if (!isArray(this.rootIds)) {\n        if (isFinite(this.rootIds)) {\n          this.rootIds = [this.rootIds];\n        } else {\n          throw new NoRootNodes('No root node IDs specified.');\n        }\n      }\n\n      var _options = assign({}, options);\n\n      traverseGraph(this.data, this.rootIds, this.columnCache, this.columnNodeOrder, this.scale, _links);\n\n      for (var i = Object.keys(this.columnCache).length; i--;) {\n        this.columnSorting[i] = {};\n      }\n\n      if (_options.sortBy) {\n        this.sort(undefined, options.sortBy, options.sortOrder || 'desc');\n      }\n\n      return this.getData();\n    }\n\n    /**\n     * Sorts nodes of all or a specific level according to a property and order.\n     *\n     * @description\n     * Currently nodes can only be sorted by _precision_, _recall_ or by name.\n     *\n     * @method  sort\n     * @author  Fritz Lekschas\n     * @date    2015-12-04\n     * @param  {Integer}  level  Specifies the level which should be sorted.\n     * @param  {String}  property   The property used for sorting. Can be one of\n     *   ['precision', 'recall', 'name'].\n     * @param  {Integer}  sortOrder  If `1` sort asc. If `-1` sort desc.\n     * @return  {Object}  Self.\n     */\n\n  }, {\n    key: 'sort',\n    value: function sort(level, property, sortOrder) {\n      var itr = 0;\n      var end = Object.keys(this.columnCache).length;\n      var getValue = void 0;\n      var sortProperty = void 0;\n\n      // 1 = asc, -1 = desc [default]\n      var numericSortOrder = sortOrder === 1 ? 1 : -1;\n\n      switch (property) {\n        case 'precision':\n          sortProperty = 'precision';\n          getValue = function getValue(obj) {\n            return obj.data.barRefs.precision;\n          };\n          break;\n        case 'recall':\n          sortProperty = 'recall';\n          getValue = function getValue(obj) {\n            return obj.data.barRefs.recall;\n          };\n          break;\n        default:\n          getValue = function getValue(obj) {\n            return obj.data.name.toLowerCase();\n          };\n          sortProperty = 'name';\n          break;\n      }\n\n      if (isFinite(level)) {\n        itr = level;\n        end = level + 1;\n      }\n\n      for (itr; itr < end; itr++) {\n        this.columnNodeOrder[itr].sort(function (a, b) {\n          // eslint-disable-line no-loop-func\n          var valueA = getValue(a);\n          var valueB = getValue(b);\n\n          if (valueA > valueB) {\n            return numericSortOrder;\n          }\n          if (valueA < valueB) {\n            return -numericSortOrder;\n          }\n          return 0;\n        });\n\n        this.columnSorting[itr].by = sortProperty;\n        this.columnSorting[itr].order = numericSortOrder;\n\n        // Update `y` according to the new position.\n        for (var i = this.columnNodeOrder[itr].length; i--;) {\n          this.columnNodeOrder[itr][i].y = this.scale.y(i);\n        }\n      }\n\n      return this;\n    }\n\n    /**\n     * Compiles an object of global properties of the visualization.\n     *\n     * @description\n     * Global properties comprise all properties that can be applied to globally\n     * across the visualization such as the width and padding of columns or the\n     * height and padding of rows.\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-17\n     *\n     * @method  compileGlobalProps\n     * @memberOf  ListGraph\n     * @public\n     * @category  Data\n     * @return  {Object}  Object with global properties.\n     */\n\n  }, {\n    key: 'nodes',\n\n\n    /**\n     * Returns the processed nodes as an Array of Array of nodes.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-16\n     *\n     * @method  nodes\n     * @memberOf  ListGraph\n     * @public\n     * @category  Data\n     * @param  {Integer}  Level for which nodes should be returned.\n     * @return  {Array}  Array of Array of nodes.\n     */\n    value: function nodes(level) {\n      return this.nodesToMatrix(level);\n    }\n\n    /**\n     * Returns an array of outgoing links per level, i.e. column, or all outgoing\n     * links.\n     *\n     * @description\n     * The column ID and level might be the same for small graphs but it's\n     * possible that the first column does not represent the first level.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-12-04\n     *\n     * @method  links\n     * @memberOf  ListGraph\n     * @public\n     * @category  Data\n     * @param  {Integer}  startLevel  Start level for returning links. If `to` is\n     *   not specified that only links from `start` level are returned.\n     * @param  {Integer}  endLevel  End level for returning links. So all links\n     *   from `start` to `to` (including) will be returned\n     * @return  {Array}  Array of objects containing the information for outgoing\n     *   links.\n     */\n\n  }, {\n    key: 'links',\n    value: function links(startLevel, endLevel) {\n      var allLinks = [];\n\n      var keys = [];\n\n      if (!isFinite(startLevel)) {\n        keys = Object.keys(this.data);\n      } else {\n        var normStartLevel = Math.max(startLevel, 0);\n        var normEndLevel = isFinite(endLevel) ? Math.min(endLevel, Object.keys(this.columnCache).length) : normStartLevel + 1;\n\n        for (var i = normStartLevel; i < normEndLevel; i++) {\n          keys = keys.concat(Object.keys(this.columnCache[i]));\n        }\n      }\n\n      for (var _i = keys.length; _i--;) {\n        if (this.data[keys[_i]].links) {\n          allLinks = allLinks.concat(this.data[keys[_i]].links.outgoing.refs);\n        }\n      }\n\n      return allLinks;\n    }\n\n    /**\n     * Offset one end of all links per level vertically.\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-18\n     *\n     * @method  offsetLinks\n     * @memberOf  ListGraph\n     * @public\n     * @category  Links\n     * @param  {Integer}  level  If given get's only links of a certain level. The\n     *   level of a node is relative to the length of the shortest path to the\n     *   root node.\n     * @param  {Number}  offsetY  The amount that one end of the link should be\n     *   offset vertically.\n     * @param  {String}  nodeType  Defines which end of the link should be\n     *   shifted. This can either be `source` or `traget`.\n     * @return  {Array}  Array of objects containing the information of the\n     *   modified outgoing links.\n     */\n\n  }, {\n    key: 'offsetLinks',\n    value: function offsetLinks(level, offsetY, nodeType) {\n      var links = this.links(level);\n\n      if ((nodeType === 'source' || nodeType === 'target') && isFinite(offsetY)) {\n        for (var i = links.length; i--;) {\n          links[i][nodeType].offsetY = offsetY;\n        }\n      }\n\n      return links;\n    }\n\n    /**\n     * Set or get the grid configuration.\n     *\n     * @author  Fritz Lekschas\n     * @date    2015-11-10\n     *\n     * @method  grid\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @category  Data\n     * @param  {Array|Object}  newGrid  New grid configuration. Can either be an\n     *   Array, e.g. `[5,3]` or an Object, e.g. `{columns: 5, rows: 3}`.\n     * @return  {Object}  Self.\n     */\n\n  }, {\n    key: 'grid',\n    value: function grid(newGrid) {\n      if (!newGrid) {\n        return _grid;\n      }\n\n      if (isArray(newGrid)) {\n        _grid.columns = parseInt(newGrid[0], 10) || _grid.columns;\n        _grid.rows = parseInt(newGrid[1], 10) || _grid.rows;\n        this.updateScaling();\n      }\n\n      if (isObject(newGrid)) {\n        _grid.columns = parseInt(newGrid.columns, 10) || _grid.columns;\n        _grid.rows = parseInt(newGrid.rows, 10) || _grid.rows;\n        this.updateScaling();\n      }\n\n      return this;\n    }\n  }, {\n    key: 'updateNodesVisibility',\n\n\n    /**\n     * Update vertical position when filtering, i.e. hiding, nodes.\n     *\n     * @method  updateNodeVisibility\n     * @author  Fritz Lekschas\n     * @date    2016-01-17\n     */\n    value: function updateNodesVisibility() {\n      var skipped = void 0;\n\n      for (var i = Object.keys(this.columnCache).length; i--;) {\n        skipped = 0;\n        // Update `y` according to the number of previously skipped nodes.\n        for (var j = 0, len = this.columnNodeOrder[i].length; j < len; j++) {\n          if (this.columnNodeOrder[i][j].hidden && !this.columnNodeOrder[i][j].data.queryMode) {\n            skipped++;\n          }\n          this.columnNodeOrder[i][j].y = this.scale.y(j - skipped);\n        }\n      }\n\n      return this;\n    }\n\n    /**\n     * Updates scaling according to the size and grid configuration.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @method  updateScaling\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @return  {Object}  Self.\n     */\n\n  }, {\n    key: 'updateScaling',\n    value: function updateScaling() {\n      this.scale.x.domain([0, _grid.columns]).range([0, _size.width]);\n      this.scale.y.domain([0, _grid.rows]).range([0, _size.height]);\n\n      _columnWidth = _size.width / _grid.columns;\n      _rowHeight = _size.height / _grid.rows;\n\n      _colAbsPadding = _columnWidth * _colRelPadding;\n      _colAbsContentWidth = _columnWidth * (1 - 2 * _colRelPadding);\n\n      _rowAbsPadding = Math.max(_rowHeight * _rowRelPadding, 2);\n      _rowAbsContentHeight = _rowHeight - 2 * _rowAbsPadding;\n\n      _cellAbsInnerPadding = _nodeRelInnerPadding * Math.min(_colAbsContentWidth, _rowAbsContentHeight, 1);\n\n      return this;\n    }\n\n    /**\n     * Set or get the size of the layout.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-10\n     *\n     * @method  size\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @param  {Array|Object}  newSize  New size. Can either be an Array, e.g.\n     *   `[200, 20]` or an Object, e.g. `{width: 200, height: 20}`.\n     * @return  {Object}  Self.\n     */\n\n  }, {\n    key: 'size',\n    value: function size(newSize) {\n      if (!newSize) {\n        return _size;\n      }\n\n      if (isArray(newSize)) {\n        _size.width = parseInt(newSize[0], 10) || _size.width;\n        _size.height = parseInt(newSize[1], 10) || _size.height;\n        this.updateScaling();\n      }\n\n      if (isObject(newSize)) {\n        _size.width = parseInt(newSize.width, 10) || _size.width;\n        _size.height = parseInt(newSize.height, 10) || _size.height;\n        this.updateScaling();\n      }\n\n      return this;\n    }\n\n    /**\n     * Set or get the relative width of the content area of a node.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-17\n     *\n     * @method  columnPadding\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @param  {Number}  padding  Number in [0.1, 0.66].\n     * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n     *   absolute number. Otherwise a relative number is assumed.\n     * @return  {Number|Object}  When `padding` is passed `this` will be returned\n     *   for chaining. Otherwise the current padding of columns will be returned.\n     */\n\n  }, {\n    key: 'columnPadding',\n    value: function columnPadding(padding, absolute) {\n      if (!padding) {\n        return _colRelPadding;\n      }\n\n      if (isFinite(padding)) {\n        var relPadding = padding;\n        if (absolute && isFinite(_columnWidth)) {\n          relPadding = padding / _columnWidth;\n        }\n        _colRelPadding = Math.max(Math.min(relPadding, 0.66), 0.1);\n        this.updateScaling();\n      }\n\n      return this;\n    }\n\n    /**\n     * Set or get the relative width of the content area of a node.\n     *\n     * @author  Fritz Lekschas\n     * @date  2015-11-17\n     *\n     * @method  rowPadding\n     * @memberOf  ListGraph\n     * @public\n     * @chainable\n     * @param  {Number}  padding  Number in [0, 0.5].\n     * @param  {Boolean}  absolute  If `true` `padding` is regarded to be an\n     *   absolute number. Otherwise a relative number is assumed.\n     * @return  {Number|Object}  When `padding` is passed `this` will be returned\n     *   for chaining. Otherwise the current padding of rows will be returned.\n     */\n\n  }, {\n    key: 'rowPadding',\n    value: function rowPadding(padding, absolute) {\n      if (!padding) {\n        return _rowRelPadding;\n      }\n\n      if (isFinite(padding)) {\n        var relPadding = padding;\n        if (absolute && isFinite(_rowHeight)) {\n          relPadding = padding / _rowHeight;\n        }\n        _rowRelPadding = Math.max(Math.min(relPadding, 0.5), 0);\n        this.updateScaling();\n      }\n\n      return this;\n    }\n  }], [{\n    key: 'compileGlobalProps',\n    value: function compileGlobalProps() {\n      return {\n        column: {\n          width: _columnWidth,\n          height: _size.height,\n          padding: _colAbsPadding,\n          contentWidth: _colAbsContentWidth\n        },\n        row: {\n          height: _rowHeight,\n          padding: _rowAbsPadding,\n          contentHeight: _rowAbsContentHeight\n        },\n        cell: {\n          padding: _cellAbsInnerPadding\n        }\n      };\n    }\n  }, {\n    key: 'updateBars',\n    value: function updateBars(graph) {\n      var nodesId = Object.keys(graph);\n      var barsData = [];\n\n      for (var i = nodesId.length; i--;) {\n        for (var j = graph[nodesId[i]].data.bars.length; j--;) {\n          barsData.push({\n            barId: nodesId[i] + '.' + graph[nodesId[i]].data.bars[j].id,\n            id: graph[nodesId[i]].data.bars[j].id,\n            value: graph[nodesId[i]].data.bars[j].value\n          });\n        }\n      }\n\n      return barsData;\n    }\n  }]);\n  return ListGraphLayout;\n}();\n\nexports.listGraph = ListGraphLayout;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"],"sourceRoot":"/source/"}